<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二叉树的统一迭代法</title>
      <link href="posts/148c3546.html"/>
      <url>posts/148c3546.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> result<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode<span class="token operator">*</span> node <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// 中</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 右（空节点不入栈）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 左（空节点不入栈）</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> result<span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">||</span> <span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 指针来访问节点，访问到最底层</span>                st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将访问的节点放进栈</span>                cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>                <span class="token comment">// 左</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                cur <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从栈里弹出的数据，就是要处理的数据（放进result数组里的数据）</span>                st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 中</span>                cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>               <span class="token comment">// 右</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> result<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode<span class="token operator">*</span> node <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对于前序遍历，这更改一下入栈顺序 （空节点不入栈）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空节点不入栈</span>        <span class="token punctuation">}</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将结果反转之后就是左右中的顺序了</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-144. 二叉树的前序遍历</title>
      <link href="posts/107bda66.html"/>
      <url>posts/107bda66.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">leetcode-144. 二叉树的前序遍历</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你二叉树的根节点 root ，返回它节点值的 <strong>前序</strong>_ _遍历。<br><strong>提示：</strong><br>树中节点数目在范围 [0, 100] 内<br>-100 &lt;= Node.val &lt;= 100</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>root = [1,null,2,3]<br><strong>输出：</strong>[1,2,3]</p><p><strong>输入：</strong>root = []<br><strong>输出：</strong>[]</p><p><strong>输入：</strong>root = [1]<br><strong>输出：</strong>[1]</p><p><strong>输入：</strong>root = [1,2]<br><strong>输出：</strong>[1,2]</p><p><strong>输入：</strong>root = [1,null,2]<br><strong>输出：</strong>[1,2]</p></blockquote><p><strong>题解：</strong><br><strong>递归：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">pretravel</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> node<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>vec<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pretravel</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pretravel</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        <span class="token function">pretravel</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>非递归：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            TreeNode <span class="token operator">*</span>tmp <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span>                st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span>                st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-145. 二叉树的后序遍历</title>
      <link href="posts/407b806a.html"/>
      <url>posts/407b806a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">leetcode-145. 二叉树的后序遍历</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你一棵二叉树的根节点 root ，返回其节点值的 <strong>后序遍历 **。<br>**提示：</strong><br>树中节点的数目在范围 [0, 100] 内<br>-100 &lt;= Node.val &lt;= 100</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>root = [1,null,2,3]<br><strong>输出：</strong>[3,2,1]</p><p><strong>输入：</strong>root = []<br><strong>输出：</strong>[]</p><p><strong>输入：</strong>root = [1]<br><strong>输出：</strong>[1]</p></blockquote><p><strong>题解：</strong><br><strong>递归：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">posttravel</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> node<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>vec<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token function">posttravel</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">posttravel</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        <span class="token function">posttravel</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>非递归：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> res<span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode<span class="token operator">*</span> node <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span>                 st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相对于前序遍历，这更改一下入栈顺序 （空节点不入栈）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span>                 st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空节点不入栈</span>        <span class="token punctuation">}</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将结果反转之后就是左右中的顺序了</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-94. 二叉树的中序遍历</title>
      <link href="posts/b61ab7b0.html"/>
      <url>posts/b61ab7b0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">leetcode-94. 二叉树的中序遍历</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给定一个二叉树的根节点 root ，返回 <em>它的 <strong>中序</strong> 遍历</em> 。<br><strong>提示：</strong><br>树中节点数目在范围 [0, 100] 内<br>-100 &lt;= Node.val &lt;= 100</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>root = [1,null,2,3]<br><strong>输出：</strong>[1,3,2]</p><p><strong>输入：</strong>root = []<br><strong>输出：</strong>[]</p><p><strong>输入：</strong>root = [1]<br><strong>输出：</strong>[1]</p></blockquote><p><strong>题解：</strong><br><strong>递归：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">intravel</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> node<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>vec<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token function">intravel</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>        vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">intravel</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        <span class="token function">intravel</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>非递归：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">||</span> <span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span> <span class="token comment">// 指针来访问节点，访问到最底层</span>                st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将访问的节点放进栈</span>                cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>                <span class="token comment">// 左</span>            <span class="token punctuation">}</span>             <span class="token keyword">else</span>             <span class="token punctuation">{</span>                cur <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从栈里弹出的数据，就是要处理的数据（放进result数组里的数据）</span>                st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 中</span>                cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>               <span class="token comment">// 右</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-239. 滑动窗口最大值</title>
      <link href="posts/6e960a51.html"/>
      <url>posts/6e960a51.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本题地址：</p><blockquote><p><a href="https://leetcode.cn/problems/sliding-window-maximum/">leetcode-239. 滑动窗口最大值</a></p></blockquote><p>题目描述：</p><blockquote><p>给你一个整数数组 nums，有一个大小为&nbsp;k&nbsp;的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k&nbsp;个数字。滑动窗口每次只向右移动一位。<br>返回 滑动窗口中的最大值 。<br>1 &lt;= nums.length &lt;= 10^5<br>-10^4 &lt;= nums[i] &lt;= 10^4<br>1 &lt;= k &lt;= nums.length</p></blockquote><p>示例：</p><blockquote><p><strong>输入：</strong>nums = [1,3,-1,-3,5,3,6,7], k = 3<br><strong>输出：</strong>[3,3,5,5,6,7]<br><strong>解释：</strong><br>滑动窗口的位置                最大值</p><hr><p>[1  3  -1] -3  5  3  6  7       3<br> 1 [3  -1  -3] 5  3  6  7       3<br> 1  3 [-1  -3  5] 3  6  7       5<br> 1  3  -1 [-3  5  3] 6  7       5<br> 1  3  -1  -3 [5  3  6] 7       6<br> 1  3  -1  -3  5 [3  6  7]      7</p><p><strong>输入：</strong>nums = [1], k = 1<br><strong>输出：</strong>[1]</p></blockquote><p>题解：<br>遍历数组，将数存放在双向队列中，并用 L,R 来标记窗口的左边界和右边界。队列中保存的并不是真的 数，而是该数值对应的数组下标位置，并且数组中的数要从大到小排序。如果当前遍历的数比队尾的值大，则需要弹出队尾值，直到队列重新满足从大到小的要求。刚开始遍历时，L 和 R 都为 0，有一个形成窗口的过程，此过程没有最大值，L 不动，R 向右移。当窗口大小形成时，L 和 R 一起向右移，每次移动时，判断队首的值的数组下标是否在 [L,R] 中，如果不在则需要弹出队首的值，当前窗口的最大值即为队首的数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyQueue que<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">class</span> <span class="token class-name">MyQueue</span><span class="token punctuation">{</span>        <span class="token keyword">public</span><span class="token operator">:</span>        deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> que<span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">==</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                que<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">&gt;</span> que<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                que<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-347. 前 K 个高频元素</title>
      <link href="posts/a6b57153.html"/>
      <url>posts/a6b57153.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/">leetcode-347. 前 K 个高频元素</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。<br>1 &lt;= nums.length &lt;= 105<br>k 的取值范围是 [1, 数组中不相同的元素的个数]<br>题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的</p></blockquote><p><strong>示例：</strong></p><blockquote><p>**输入: **nums = [1,1,1,2,2,3], k = 2<br>**输出: **[1,2]</p><p>**输入: **nums = [1], k = 1<br>**输出: **[1]</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">class</span> <span class="token class-name">mycomparison</span><span class="token punctuation">{</span>        <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>second <span class="token operator">&gt;</span> rhs<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">topKFrequent</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> map<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            map<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> mycomparison<span class="token operator">&gt;</span> pri_que<span class="token punctuation">;</span>        <span class="token comment">// 用固定大小为k的小顶堆，扫面所有频率的数值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>iterator it <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pri_que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pri_que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果堆的大小大于了K，则队列弹出，保证堆的大小一直为k</span>                pri_que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 找出前K个高频元素，因为小顶堆先弹出的是最小的，所以倒序来输出到数组</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">result</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pri_que<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>            pri_que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-1047. 删除字符串中的所有相邻重复项</title>
      <link href="posts/79cfc748.html"/>
      <url>posts/79cfc748.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">leetcode-1047. 删除字符串中的所有相邻重复项</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给出由小写字母组成的字符串&nbsp;S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。<br>在 S 上反复执行重复项删除操作，直到无法继续删除。<br>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。<br><strong>提示：</strong><br>1 &lt;= S.length &lt;= 20000<br>S 仅由小写英文字母组成。</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>“abbaca”<br><strong>输出：</strong>“ca”<br><strong>解释：</strong><br>例如，在 “abbaca” 中，我们可以删除 “bb” 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 “aaca”，其中又只有 “aa” 可以执行重复项删除操作，所以最后的字符串为 “ca”。</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ts <span class="token operator">:</span> s<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ts<span class="token punctuation">)</span>                st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">+=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-150. 逆波兰表达式求值</title>
      <link href="posts/77dbf1bb.html"/>
      <url>posts/77dbf1bb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">leetcode-150. 逆波兰表达式求值</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>根据<strong>逆波兰表示法</strong>，求表达式的值。<br>有效的算符包括&nbsp;+、-、<em>、/&nbsp;。每个运算对象可以是整数，也可以是另一个逆波兰表达式。<br><strong>注意</strong>&nbsp;两个整数之间的除法只保留整数部分。<br>可以保证给定的逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。<br><strong>提示：</strong><br>1 &lt;= tokens.length &lt;= 10^4<br>tokens[i]&nbsp;是一个算符（”+”、”-“、”</em>“ 或 “/“），或是在范围 [-200, 200] 内的一个整数<br><strong>逆波兰表达式：</strong><br>逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。<br>平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。<br>该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。<br>逆波兰表达式主要有以下两个优点：<br>去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。<br>适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>tokens = [“2”,”1”,”+”,”3”,”*”]<br><strong>输出：</strong>9<br><strong>解释：</strong>该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</p><p><strong>输入：</strong>tokens = [“4”,”13”,”5”,”/“,”+”]<br><strong>输出：</strong>6<br><strong>解释：</strong>该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6</p><p><strong>输入：</strong>tokens = [“10”,”6”,”9”,”3”,”+”,”-11”,”<em>“,”/“,”</em>“,”17”,”+”,”5”,”+”]<br><strong>输出：</strong>22<br><strong>解释：</strong>该算式转化为常见的中缀算术表达式为：<br>  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5<br>= ((10 * (6 / (12 * -11))) + 17) + 5<br>= ((10 * (6 / -132)) + 17) + 5<br>= ((10 * 0) + 17) + 5<br>= (0 + 17) + 5<br>= 17 + 5<br>= 22</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokens<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"+"</span> <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-"</span> <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"*"</span> <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">long</span> num1 <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> num2 <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"+"</span><span class="token punctuation">)</span>                     st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2 <span class="token operator">+</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-"</span><span class="token punctuation">)</span>                     st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2 <span class="token operator">-</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"*"</span><span class="token punctuation">)</span>                     st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2 <span class="token operator">*</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">)</span>                     st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2 <span class="token operator">/</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>                st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-20. 有效的括号</title>
      <link href="posts/effee05c.html"/>
      <url>posts/effee05c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/valid-parentheses/">leetcode-20. 有效的括号</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’&nbsp;的字符串 s ，判断字符串是否有效。<br>有效字符串需满足：<br>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。<br><strong>提示：</strong><br>1 &lt;= s.length &lt;= 104<br>s 仅由括号 ‘()[]{}’ 组成</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>s = “()”<br><strong>输出：</strong>true</p><p><strong>输入：</strong>s = “()[]{}”<br><strong>输出：</strong>true</p><p><strong>输入：</strong>s = “(]”<br><strong>输出：</strong>false</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isValid</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'{'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">)</span>                st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span>                st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'}'</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'{'</span><span class="token punctuation">)</span>                st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">']'</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">)</span>                st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-225. 用队列实现栈</title>
      <link href="posts/e9992c91.html"/>
      <url>posts/e9992c91.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/">leetcode-225. 用队列实现栈</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。<br>实现 MyStack 类：<br>void push(int x) 将元素 x 压入栈顶。<br>int pop() 移除并返回栈顶元素。<br>int top() 返回栈顶元素。<br>boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。<br><strong>注意：</strong><br>你只能使用队列的基本操作 —— 也就是&nbsp;push to back、peek/pop from front、size 和&nbsp;is empty&nbsp;这些操作。<br>你所使用的语言也许不支持队列。&nbsp;你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列&nbsp;, 只要是标准的队列操作即可。<br><strong>提示：</strong><br>1 &lt;= x &lt;= 9<br>最多调用100 次 push、pop、top 和 empty<br>每次调用 pop 和 top 都保证栈不为空</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong><br>[“MyStack”, “push”, “push”, “top”, “pop”, “empty”]<br>[[], [1], [2], [], [], []]<br><strong>输出：</strong><br>[null, null, null, 2, 2, false]<br><strong>解释：</strong><br>MyStack myStack = new MyStack();<br>myStack.push(1);<br>myStack.push(2);<br>myStack.top(); // 返回 2<br>myStack.pop(); // 返回 2<br>myStack.empty(); // 返回 False</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> que1<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> que2<span class="token punctuation">;</span>     <span class="token function">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        que1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> que1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            que2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>que1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            que1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> que1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        que1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        que1 <span class="token operator">=</span> que2<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            que2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> que1<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> que1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your MyStack object will be instantiated and called as such: * MyStack* obj = new MyStack(); * obj-&gt;push(x); * int param_2 = obj-&gt;pop(); * int param_3 = obj-&gt;top(); * bool param_4 = obj-&gt;empty(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-232. 用栈实现队列</title>
      <link href="posts/b7f330e7.html"/>
      <url>posts/b7f330e7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">leetcode-232. 用栈实现队列</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：<br>实现 MyQueue 类：<br>void push(int x) 将元素 x 推到队列的末尾<br>int pop() 从队列的开头移除并返回元素<br>int peek() 返回队列开头的元素<br>boolean empty() 如果队列为空，返回 true ；否则，返回 false</p><p>说明：<br>你 只能 使用标准的栈操作 —— 也就是只有&nbsp;push to top,&nbsp;peek/pop from top,&nbsp;size, 和&nbsp;is empty&nbsp;操作是合法的。<br>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</p><p>1 &lt;= x &lt;= 9<br>最多调用 100 次 push、pop、peek 和 empty<br>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）</p><p>你能否实现每个操作均摊时间复杂度为 O(1) 的队列？换句话说，执行 n 个操作的总时间复杂度为 O(n) ，即使其中一个操作可能花费较长时间。</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong> [“MyQueue”, “push”, “push”, “peek”, “pop”, “empty”]<br>[[], [1], [2], [], [], []]<br><strong>输出：</strong><br>[null, null, null, 1, 1, false]<br><strong>解释：</strong><br>MyQueue myQueue = new MyQueue();<br>myQueue.push(1); // queue is: [1]<br>myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)<br>myQueue.peek(); // return 1<br>myQueue.pop(); // return 1, queue is [2]<br>myQueue.empty(); // return false</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> stIn<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> stOut<span class="token punctuation">;</span>    <span class="token function">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stIn<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stOut<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stIn<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                stOut<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stIn<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stIn<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> stOut<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stOut<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stOut<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stIn<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stOut<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your MyQueue object will be instantiated and called as such: * MyQueue* obj = new MyQueue(); * obj-&gt;push(x); * int param_2 = obj-&gt;pop(); * int param_3 = obj-&gt;peek(); * bool param_4 = obj-&gt;empty(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-151. 反转字符串中的单词</title>
      <link href="posts/e54f85fe.html"/>
      <url>posts/e54f85fe.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">leetcode-151. 反转字符串中的单词</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你一个字符串 s ，请你反转字符串中 单词 的顺序。<br>单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。<br>返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。<br>注意：输入字符串 s中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。<br>1 &lt;= s.length &lt;= 10^4<br>s 包含英文大小写字母、数字和空格 ‘  ‘<br>s 中至少存在一个 单词</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>s = “the sky is blue”<br><strong>输出：</strong>“blue is sky the”</p><p><strong>输入：</strong>s = “ &nbsp;hello world &nbsp;“<br><strong>输出：</strong>“world hello”<br><strong>解释：</strong>反转后的字符串中不能存在前导空格和尾随空格。</p><p><strong>输入：</strong>s = “a good &nbsp; example”<br><strong>输出：</strong>“example good a”<br><strong>解释：</strong>如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">removeExtraSpaces</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                start <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">,</span> j <span class="token operator">=</span> end<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">removeExtraSpaces</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>slow <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    s<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                s<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        s<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-459. 重复的子字符串</title>
      <link href="posts/b7bd8f48.html"/>
      <url>posts/b7bd8f48.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/repeated-substring-pattern/">leetcode-459. 重复的子字符串</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给定一个非空的字符串 s ，检查是否可以通过由它的一个子串重复多次构成。<br>1 &lt;= s.length &lt;= 10^4<br>s 由小写英文字母组成</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入:</strong> s = “abab”<br><strong>输出:</strong> true<br><strong>解释:</strong> 可由子串 “ab” 重复两次构成。</p><p><strong>输入:</strong> s = “aba”<br><strong>输出:</strong> false</p><p><strong>输入:</strong> s = “abcabcabcabc”<br><strong>输出:</strong> true<br><strong>解释:</strong> 可由子串 “abc” 重复四次构成。 (或子串 “abcabc” 重复两次构成。)</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">repeatedSubstringPattern</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string t <span class="token operator">=</span> s <span class="token operator">+</span> s<span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         t<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> std<span class="token operator">::</span>string<span class="token operator">::</span>npos<span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-剑指 Offer 05. 替换空格</title>
      <link href="posts/7e602320.html"/>
      <url>posts/7e602320.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">leetcode-剑指 Offer 05. 替换空格</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。<br>0 &lt;= s 的长度 &lt;= 10000</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>s = “We are happy.”<br><strong>输出：</strong>“We%20are%20happy.”</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">replaceSpace</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> oldLength <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldLength<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span>                <span class="token operator">++</span>count<span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> newlength <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> newlength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> oldLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                s<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                s<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span>                s<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'%'</span><span class="token punctuation">;</span>                left<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>                s<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-剑指 Offer 58 - II. 左旋转字符串</title>
      <link href="posts/768fde87.html"/>
      <url>posts/768fde87.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">leetcode-剑指 Offer 58 - II. 左旋转字符串</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。<br>1 &lt;= k &lt; s.length &lt;= 10000</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入:</strong> s = “abcdefg”, k = 2<br>**输出:&nbsp;**”cdefgab”</p><p><strong>输入:</strong> s = “lrloseumgh”, k = 6<br>**输出:&nbsp;**”umghlrlose”</p></blockquote><p><strong>题解：</strong><br>本题如果可以额外申请空间的话较简单，为提升难度，添加一个限制不能申请额外空间，只能在本串上进行操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">char</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">reverseStr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverseStr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverseStr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 04. 二维数组中的查找</title>
      <link href="posts/58b0f60b.html"/>
      <url>posts/58b0f60b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本题地址：<a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指 Offer 04. 二维数组中的查找</a><br><strong>注意：</strong>本题与主站 240 题相同：<a href="https://leetcode-cn.com/problems/search-a-2d-matrix-ii/">leetcode-240. 搜索二维矩阵 II</a></p></blockquote><p>题目：</p><blockquote><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br>0 &lt;= n &lt;= 1000<br>0 &lt;= m &lt;= 1000</p></blockquote><p>示例:</p><blockquote><p>现有矩阵 matrix 如下：<br>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]<br>给定 target&nbsp;=&nbsp;5，返回&nbsp;true。<br>给定&nbsp;target&nbsp;=&nbsp;20，返回&nbsp;false。</p></blockquote><p>题解：</p><blockquote><p>从右上角开始走，利用这个顺序关系可以在O(m+n)的复杂度下解决这个题：</p><ul><li>如果当前位置元素比target小，则row++</li><li>如果当前位置元素比target大，则col--</li><li>如果相等，返回true</li><li>如果越界了还没找到，说明不存在，返回false</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>col<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>row<span class="token operator">&lt;</span>m<span class="token operator">&amp;&amp;</span>col<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span>                col<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                row<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 07. 重建二叉树</title>
      <link href="posts/73d0ff75.html"/>
      <url>posts/73d0ff75.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本题地址：<a href="https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof/">剑指 Offer 07. 重建二叉树</a><br>注意：本题与主站 105 题重复：<a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">leetcode-105.从前序与中序遍历序列构造二叉树</a></p></blockquote><p>题目：</p><blockquote><p>输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。<br>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。<br>0 &lt;= 节点个数 &lt;= 5000</p></blockquote><p>示例：</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://s1.328888.xyz/2022/08/02/O99aS.png"><br>Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]<br>Output: [3,9,20,null,null,15,7]</p></blockquote><p>题解：</p><blockquote><p>前序遍历性质： 节点按照 [ 根节点 | 左子树 | 右子树 ] 排序。<br>中序遍历性质： 节点按照 [ 左子树 | 根节点 | 右子树 ] 排序。<br> <strong>根节点在前序遍历的索引 root 、子树在中序遍历的左边界left 、子树在中序遍历的右边界 right；</strong><br> 当 left &gt; right ，代表已经越过叶节点，此时返回 nullnull ；<br>建立根节点 node ： 节点值为 preorder[root] ；<br>划分左右子树： 查找根节点在中序遍历 inorder 中的索引 i ；<br>注意：该方法只适用于 “无重复节点值” 的二叉树。</p></blockquote><table><thead><tr><th></th><th align="center"><strong>根节点索引</strong></th><th align="center"><strong>中序遍历左边界</strong></th><th align="right"><strong>中序遍历右边界</strong></th></tr></thead><tbody><tr><td><strong>左子树</strong></td><td align="center">root + 1</td><td align="center">left</td><td align="right">i - 1</td></tr><tr><td><strong>右子树</strong></td><td align="center">i - left + root + 1</td><td align="center">i + 1</td><td align="right">right</td></tr></tbody></table><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> preorder<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-&gt;</span>preorder <span class="token operator">=</span> preorder<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            dic<span class="token punctuation">[</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> preorder<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> dic<span class="token punctuation">;</span>        <span class="token comment">//三个索引分别为</span>        <span class="token comment">//当前根的的索引</span>        <span class="token comment">//递归树的左边界，即数组左边界</span>        <span class="token comment">//递归树的右边界，即数组右边界</span>    TreeNode<span class="token operator">*</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> right<span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>                        <span class="token comment">// 递归终止</span>        TreeNode<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 建立根节点</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> dic<span class="token punctuation">[</span>preorder<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token comment">// 划分根节点、左子树、右子树</span>        <span class="token comment">//左子树的根的索引为先序中的根节点+1 </span>        <span class="token comment">//递归左子树的左边界为原来的中序in_left</span>        <span class="token comment">//递归左子树的右边界为中序中的根节点索引-1</span>        node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 开启左子树递归</span>        <span class="token comment">//右子树的根的索引为先序中的 当前根位置 + 左子树的数量 + 1</span>        <span class="token comment">//递归右子树的左边界为中序中当前根节点+1</span>        <span class="token comment">//递归右子树的右边界为中序中原来右子树的边界</span>        node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">recur</span><span class="token punctuation">(</span>root <span class="token operator">+</span> i <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开启右子树递归</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>                                            <span class="token comment">// 回溯返回根节点</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-344. 反转字符串</title>
      <link href="posts/17a52ddc.html"/>
      <url>posts/17a52ddc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/reverse-string/">leetcode-344. 反转字符串</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。<br>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。<br>1 &lt;= s.length &lt;= 10^5<br>s[i] 都是 ASCII 码表中的可打印字符</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>s = [“h”,”e”,”l”,”l”,”o”]<br><strong>输出：</strong>[“o”,”l”,”l”,”e”,”h”]</p><p><strong>输入：</strong>s = [“H”,”a”,”n”,”n”,”a”,”h”]<br><strong>输出：</strong>[“h”,”a”,”n”,”n”,”a”,”H”]</p></blockquote><p><strong>题解：</strong><br>Easy.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">char</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-541. 反转字符串 II</title>
      <link href="posts/8b5ba61e.html"/>
      <url>posts/8b5ba61e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/reverse-string-ii/">leetcode-541. 反转字符串 II</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给定一个字符串 s 和一个整数 k，从字符串开头算起，每计数至 2k 个字符，就反转这 2k 字符中的前 k 个字符。<br>如果剩余字符少于 k 个，则将剩余字符全部反转。<br>如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。<br>1 &lt;= s.length &lt;= 10^4<br>s 仅由小写英文组成<br>1 &lt;= k &lt;= 10^4</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>s = “abcdefg”, k = 2<br><strong>输出：</strong>“bacdfeg”</p><p><strong>输入：</strong>s = “abcd”, k = 2<br><strong>输出：</strong>“bacd”</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">reverseStr</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> k <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i <span class="token operator">+</span> k <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                 <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-1. 两数之和</title>
      <link href="posts/d0c90da7.html"/>
      <url>posts/d0c90da7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/two-sum/">leetcode-1. 两数之和</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给定一个整数数组 nums&nbsp;和一个整数目标值 target，请你在该数组中找出 和为目标值 target&nbsp; 的那&nbsp;两个&nbsp;整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。<br>2 &lt;= nums.length &lt;= 10^4<br>-10^9 &lt;= nums[i] &lt;= 10^9<br>-10^9 &lt;= target &lt;= 10^9<br><strong>只会存在一个有效答案</strong><br>你可以想出一个时间复杂度小于 O(n^2) 的算法吗？</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>nums = [2,7,11,15], target = 9<br><strong>输出：</strong>[0,1]<br><strong>解释：</strong>因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p><p><strong>输入：</strong>nums = [3,2,4], target = 6<br><strong>输出：</strong>[1,2]</p><p><strong>输入：</strong>nums = [3,3], target = 6<br><strong>输出：</strong>[0,1]</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> map<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">auto</span> res <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">!=</span> map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>res<span class="token operator">-&gt;</span>second<span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-15. 三数之和</title>
      <link href="posts/d5991cd4.html"/>
      <url>posts/d5991cd4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/3sum/">leetcode-15. 三数之和</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请<br>你返回所有和为 0 且不重复的三元组。<br>注意：答案中不可以包含重复的三元组。<br>3 &lt;= nums.length &lt;= 3000<br>-10^5 &lt;= nums[i] &lt;= 10^5</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>nums = [-1,0,1,2,-1,-4]<br><strong>输出：</strong>[[-1,-1,2],[-1,0,1]]<br><strong>解释：</strong><br>nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。<br>nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。<br>nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。<br>不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。<br>注意，输出的顺序和三元组的顺序并不重要。</p><p><strong>输入：</strong>nums = [0,1,1]<br><strong>输出：</strong>[]<br><strong>解释：</strong>唯一可能的三元组和不为 0 。</p><p><strong>输入：</strong>nums = [0,0,0]<br><strong>输出：</strong>[[0,0,0]]<br><strong>解释：</strong>唯一可能的三元组和为 0 。</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> result<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&gt;</span> left<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    left<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&gt;</span> left <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        right<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&gt;</span> left <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        left<span class="token operator">++</span><span class="token punctuation">;</span>                    right<span class="token operator">--</span><span class="token punctuation">;</span>                    left<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-242. 有效的字母异位词</title>
      <link href="posts/deff244.html"/>
      <url>posts/deff244.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/valid-anagram/">leetcode-242. 有效的字母异位词</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。<br>注意：若&nbsp;s 和 t&nbsp;中每个字符出现的次数都相同，则称&nbsp;s 和 t&nbsp;互为字母异位词。<br>1 &lt;= s.length, t.length &lt;= 5 * 10^4<br>s 和 t 仅包含小写字母</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入:</strong> s = “anagram”, t = “nagaram”<br><strong>输出:</strong> true</p><p><strong>输入:</strong> s = “rat”, t = “car”<br>**输出: **false</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hashs<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hasht<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            hashs<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            hasht<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hashs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> hasht<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-349. 两个数组的交集</title>
      <link href="posts/94392b23.html"/>
      <url>posts/94392b23.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">leetcode-349. 两个数组的交集</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给定两个数组 nums1 和 nums2 ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。<br>1 &lt;= nums1.length, nums2.length &lt;= 1000<br>0 &lt;= nums1[i], nums2[i] &lt;= 1000</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>nums1 = [1,2,2,1], nums2 = [2,2]<br><strong>输出：</strong>[2]</p><p><strong>输入：</strong>nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br><strong>输出：</strong>[9,4]<br><strong>解释：</strong>[4,9] 也是可通过的</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">intersection</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> hash<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            hash<span class="token punctuation">[</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                hash<span class="token punctuation">[</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">intersection</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">nums</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums2<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">!=</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-383. 赎金信</title>
      <link href="posts/134d59a4.html"/>
      <url>posts/134d59a4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/ransom-note/">leetcode-383. 赎金信</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你两个字符串：ransomNote 和 magazine ，判断 ransomNote 能不能由 magazine 里面的字符构成。<br>如果可以，返回 true ；否则返回 false 。<br>magazine 中的每个字符只能在 ransomNote 中使用一次。<br>1 &lt;= ransomNote.length, magazine.length &lt;= 10^5<br>ransomNote 和 magazine 由小写英文字母组成</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>ransomNote = “a”, magazine = “b”<br><strong>输出：</strong>false</p><p><strong>输入：</strong>ransomNote = “aa”, magazine = “ab”<br><strong>输出：</strong>false</p><p><strong>输入：</strong>ransomNote = “aa”, magazine = “aab”<br><strong>输出：</strong>true</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">canConstruct</span><span class="token punctuation">(</span>string ransomNote<span class="token punctuation">,</span> string magazine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> hash<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> magazine<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            hash<span class="token punctuation">[</span>magazine<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ransomNote<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>hash<span class="token punctuation">[</span>ransomNote<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-454. 四数相加 II</title>
      <link href="posts/61eec703.html"/>
      <url>posts/61eec703.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/4sum-ii/">leetcode-454. 四数相加 II</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：<br>0 &lt;= i, j, k, l &lt; n<br>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0<br>n == nums1.length<br>n == nums2.length<br>n == nums3.length<br>n == nums4.length<br>1 &lt;= n &lt;= 200<br>-2^28 &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 2^28</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]<br><strong>输出：</strong>2<br><strong>解释：</strong><br>两个元组如下：</p><ol><li>(0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0</li><li>(1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</li></ol><p><strong>输入：</strong>nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]<br><strong>输出：</strong>1</p></blockquote><p><strong>题解：</strong><br>类似两数之和，但相对较简单些，因为四个数组相对独立，不需要考虑有重复的四个元素相加等于0的情况，将数组nums1和nums2的和存放在map中,另一个数为数组nums3和nums4中元素的和</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">fourSumCount</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums2<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums3<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums4<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> map<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">:</span> nums1<span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">:</span> nums2<span class="token punctuation">)</span>                map<span class="token punctuation">[</span>a <span class="token operator">+</span> b<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">:</span> nums3<span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">:</span> nums4<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                res <span class="token operator">+=</span> map<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span> c <span class="token operator">-</span> d<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-面试题 02.07. 链表相交</title>
      <link href="posts/9703af79.html"/>
      <url>posts/9703af79.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">leetcode-面试题 02.07. 链表相交</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。<br>题目数据 <strong>保证</strong> 整个链式结构中不存在环。<br><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。<br>listA 中节点数目为 m<br>listB 中节点数目为 n<br>0 &lt;= m, n &lt;= 3 * 104<br>1 &lt;= Node.val &lt;= 105<br>0 &lt;= skipA &lt;= m<br>0 &lt;= skipB &lt;= n<br>如果 listA 和 listB 没有交点，intersectVal 为 0<br>如果 listA 和 listB 有交点，intersectVal == listA[skipA + 1] == listB[skipB + 1]</p></blockquote><p><strong>示例：</strong></p><blockquote><p>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3<br>输出：Intersected at ‘8’<br>解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。<br>在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</p><p>输入：intersectVal&nbsp;= 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br>输出：Intersected at ‘2’<br>解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。<br>从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。<br>在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</p><p>输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br>输出：null<br>解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。<br>由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>这两个链表不相交，因此返回 null 。</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> lenA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lenB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>curA <span class="token operator">=</span> headA<span class="token punctuation">,</span><span class="token operator">*</span>curB <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>curA <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lenA<span class="token operator">++</span><span class="token punctuation">;</span>            curA <span class="token operator">=</span> curA<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>curB <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lenB<span class="token operator">++</span><span class="token punctuation">;</span>            curB <span class="token operator">=</span> curB<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        curA <span class="token operator">=</span> headA<span class="token punctuation">;</span>        curB <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>lenA <span class="token operator">&gt;</span> lenB<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            curA <span class="token operator">=</span> curA<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            lenA<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>lenA <span class="token operator">&lt;</span> lenB<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            curB <span class="token operator">=</span> curB<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            lenB<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>curA <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curA <span class="token operator">==</span> curB<span class="token punctuation">)</span>                <span class="token keyword">return</span> curA<span class="token punctuation">;</span>            curA <span class="token operator">=</span> curA<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            curB <span class="token operator">=</span> curB<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            lenA<span class="token operator">--</span><span class="token punctuation">;</span>            lenB<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-19. 删除链表的倒数第 N 个结点</title>
      <link href="posts/74d16850.html"/>
      <url>posts/74d16850.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">leetcode-19. 删除链表的倒数第 N 个结点</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。<br>链表中结点的数目为 sz<br>1 &lt;= sz &lt;= 30<br>0 &lt;= Node.val &lt;= 100<br>1 &lt;= n &lt;= sz</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>head = [1,2,3,4,5], n = 2<br><strong>输出：</strong>[1,2,3,5]</p><p><strong>输入：</strong>head = [1], n = 1<br><strong>输出：</strong>[]</p><p><strong>输入：</strong>head = [1,2], n = 1<br><strong>输出：</strong>[1]</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> prehead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prehead<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> prehead<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> prehead<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">&amp;&amp;</span> fast <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token operator">--</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            slow <span class="token operator">=</span> slow<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        slow<span class="token operator">-&gt;</span>next <span class="token operator">=</span> slow<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> prehead<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-24. 两两交换链表中的节点</title>
      <link href="posts/9d230ec7.html"/>
      <url>posts/9d230ec7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">leetcode-24. 两两交换链表中的节点</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。<br>链表中节点的数目在范围 [0, 100] 内<br>0 &lt;= Node.val &lt;= 100</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>head = [1,2,3,4]<br><strong>输出：</strong>[2,1,4,3]</p><p><strong>输入：</strong>head = []<br><strong>输出：</strong>[]</p><p><strong>输入：</strong>head = [1]<br><strong>输出：</strong>[1] </p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> prehead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> prehead<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ListNode<span class="token operator">*</span> temp1 <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            ListNode<span class="token operator">*</span> temp2 <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            cur<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp1<span class="token punctuation">;</span>            temp1<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp2<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> prehead<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-206. 反转链表</title>
      <link href="posts/88bc9a63.html"/>
      <url>posts/88bc9a63.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/reverse-linked-list/">leetcode-206. 反转链表</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。<br>链表中节点的数目范围是 [0, 5000]<br>-5000 &lt;= Node.val &lt;= 5000<br>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>head = [1,2,3,4,5]<br><strong>输出：</strong>[5,4,3,2,1]</p><p><strong>输入：</strong>head = [1,2]<br><strong>输出：</strong>[2,1] </p></blockquote><p><strong>输入：</strong>head = [] </p><blockquote><p><strong>输出：</strong>[]</p></blockquote><p><strong>题解：</strong><br><strong>非递归，双指针法。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>temp<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverse</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> pre<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> cur<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> pre<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> temp<span class="token punctuation">;</span>        temp <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">reverse</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-707. 设计链表</title>
      <link href="posts/c7392cd.html"/>
      <url>posts/c7392cd.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/design-linked-list/">leetcode-707. 设计链表</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val&nbsp;和&nbsp;next。val&nbsp;是当前节点的值，next&nbsp;是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性&nbsp;prev&nbsp;以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。<br>在链表类中实现这些功能：<br>get(index)：获取链表中第&nbsp;index&nbsp;个节点的值。如果索引无效，则返回-1。<br>addAtHead(val)：在链表的第一个元素之前添加一个值为&nbsp;val&nbsp;的节点。插入后，新节点将成为链表的第一个节点。<br>addAtTail(val)：将值为&nbsp;val 的节点追加到链表的最后一个元素。<br>addAtIndex(index,val)：在链表中的第&nbsp;index&nbsp;个节点之前添加值为&nbsp;val&nbsp; 的节点。如果&nbsp;index&nbsp;等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。<br>deleteAtIndex(index)：如果索引&nbsp;index 有效，则删除链表中的第&nbsp;index 个节点。<br>所有val值都在 [1, 1000] 之内。<br>操作次数将在  [1, 1000] 之内。<br>请不要使用内置的 LinkedList 库。</p></blockquote><p><strong>示例：</strong></p><blockquote><p>MyLinkedList linkedList = new MyLinkedList();<br>linkedList.addAtHead(1);<br>linkedList.addAtTail(3);<br>linkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3<br>linkedList.get(1);            //返回2<br>linkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3<br>linkedList.get(1);            //返回3</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyLinkedList</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">struct</span> <span class="token class-name">LinkedNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        LinkedNode<span class="token operator">*</span> next<span class="token punctuation">;</span>        <span class="token function">LinkedNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">val</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">MyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">LinkedNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LinkedNode<span class="token operator">*</span> cur <span class="token operator">=</span> Head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cur<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">addAtHead</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedNode<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">LinkedNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        newNode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> Head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        Head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">addAtTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedNode<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">LinkedNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkedNode<span class="token operator">*</span> cur <span class="token operator">=</span> Head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">addAtIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LinkedNode<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">LinkedNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkedNode<span class="token operator">*</span> cur <span class="token operator">=</span> Head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        newNode<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">deleteAtIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LinkedNode<span class="token operator">*</span> cur <span class="token operator">=</span> Head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> cur <span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LinkedNode<span class="token operator">*</span> tmp <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        cur<span class="token operator">-&gt;</span>next <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token keyword">delete</span> tmp<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">printLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedNode<span class="token operator">*</span> cur <span class="token operator">=</span> Head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> cur<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    LinkedNode<span class="token operator">*</span> Head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your MyLinkedList object will be instantiated and called as such: * MyLinkedList* obj = new MyLinkedList(); * int param_1 = obj-&gt;get(index); * obj-&gt;addAtHead(val); * obj-&gt;addAtTail(val); * obj-&gt;addAtIndex(index,val); * obj-&gt;deleteAtIndex(index); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-203. 移除链表元素</title>
      <link href="posts/f3dab808.html"/>
      <url>posts/f3dab808.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">leetcode-203. 移除链表元素</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val == val 的节点，并返回 新的头节点 。<br>列表中的节点数目在范围 [0, 10^4] 内<br>1 &lt;= Node.val &lt;= 50<br>0 &lt;= val &lt;= 50</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>head = [1,2,6,3,4,5,6], val = 6<br><strong>输出：</strong>[1,2,3,4,5]</p><p><strong>输入：</strong>head = [], val = 1<br><strong>输出：</strong>[]</p><p><strong>输入：</strong>head = [7,7,7,7], val = 7<br><strong>输出：</strong>[]</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode() : val(0), next(nullptr) {} *     ListNode(int x) : val(x), next(nullptr) {} *     ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> head<span class="token operator">-&gt;</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span>            head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span>                temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>            <span class="token keyword">else</span>                 temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-59. 螺旋矩阵 II</title>
      <link href="posts/157ac6d3.html"/>
      <url>posts/157ac6d3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">leetcode-59. 螺旋矩阵 II</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你一个正整数 n ，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>n = 3<br><strong>输出：</strong>[[1,2,3],[8,9,4],[7,6,5]]</p><p><strong>输入：</strong>n = 1<br><strong>输出：</strong>[[1]]</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">res</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> startx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> starty <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curnum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> curx <span class="token operator">=</span> startx<span class="token punctuation">,</span> cury <span class="token operator">=</span> starty<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>                res<span class="token punctuation">[</span>curx<span class="token punctuation">]</span><span class="token punctuation">[</span>cury<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> curnum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>                res<span class="token punctuation">[</span>curx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cury<span class="token punctuation">]</span> <span class="token operator">=</span> curnum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>                res<span class="token punctuation">[</span>curx<span class="token punctuation">]</span><span class="token punctuation">[</span>cury<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> curnum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>                res<span class="token punctuation">[</span>curx<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cury<span class="token punctuation">]</span> <span class="token operator">=</span> curnum<span class="token operator">++</span><span class="token punctuation">;</span>            startx <span class="token operator">=</span> startx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            starty <span class="token operator">=</span> starty <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            length <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            res<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>curnum<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-209. 长度最小的子数组</title>
      <link href="posts/c13c9a32.html"/>
      <url>posts/c13c9a32.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">leetcode-209. 长度最小的子数组</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给定一个含有&nbsp;n&nbsp;个正整数的数组和一个正整数 target 。<br>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组&nbsp;[numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。<br>如果你已经实现_ _O(n) 时间复杂度的解法, 请尝试设计一个 O(n log(n)) 时间复杂度的解法。</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>target = 7, nums = [2,3,1,2,4,3]<br><strong>输出：</strong>2<br><strong>解释：</strong>子数组&nbsp;[4,3]&nbsp;是该条件下的长度最小的子数组。</p><p><strong>输入：</strong>target = 4, nums = [1,4,4]<br><strong>输出：</strong>1</p><p><strong>输入：</strong>target = 11, nums = [1,1,1,1,1,1,1,1]<br><strong>输出：</strong>0</p></blockquote><p><strong>题解：</strong><br>通过滑动窗口法，for循环遍历终止位置，</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sublength<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sum <span class="token operator">+=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> target<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                sublength <span class="token operator">=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sublength <span class="token operator">&lt;</span> res<span class="token punctuation">)</span>                    res <span class="token operator">=</span> sublength<span class="token punctuation">;</span>                sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res <span class="token operator">==</span> <span class="token number">0x3f3f3f3f</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-977. 有序数组的平方</title>
      <link href="posts/3d539b1a.html"/>
      <url>posts/3d539b1a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">leetcode-977. 有序数组的平方</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 nums，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入：</strong>nums = [-4,-1,0,3,10]<br><strong>输出：</strong>[0,1,9,16,100]<br><strong>解释：</strong>平方后，数组变为 [16,1,0,9,100] 排序后，数组变为 [0,1,9,16,100]</p><p><strong>输入：</strong>nums = [-7,-3,2,3,11]<br><strong>输出：</strong>[4,9,9,49,121]</p></blockquote><p><strong>题解：</strong><br>数组是有序的， 只不过负数平方之后可能成为最大数了。<br>那么数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。<br>此时可以考虑双指针法了，left指向起始位置，right指向终止位置。<br>定义一个新数组res，和nums数组一样的大小，让index指向result数组终止位置。<br>向res中逐个插入元素。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">res</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            index<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-27. 移除元素</title>
      <link href="posts/f17d5e68.html"/>
      <url>posts/f17d5e68.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/remove-element/">leetcode-27. 移除元素</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给你一个数组 nums&nbsp;和一个值 val，你需要 原地 移除所有数值等于&nbsp;val&nbsp;的元素，并返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p><strong>示例：</strong></p><blockquote><p>输入：nums = [3,2,2,3], val = 3<br>输出：2, nums = [2,2]<br>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</p><p>输入：nums = [0,1,2,2,3,0,4,2], val = 2<br>输出：5, nums = [0,1,4,0,3]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p><strong>题解：</strong><br>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong><br>定义快慢指针</p><ul><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li><li>慢指针：指向更新 新数组下标的位置<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> slowIndex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> fastIndex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>fastIndex<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fastIndex<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fastIndex<span class="token punctuation">]</span><span class="token operator">!=</span>val<span class="token punctuation">)</span>                nums<span class="token punctuation">[</span>slowIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>fastIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> slowIndex<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-704. 二分查找</title>
      <link href="posts/bec86256.html"/>
      <url>posts/bec86256.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>本题地址：</strong></p><blockquote><p><a href="https://leetcode.cn/problems/binary-search/">leetcode-704. 二分查找</a></p></blockquote><p><strong>题目描述：</strong></p><blockquote><p>给定一个&nbsp;n&nbsp;个元素有序的（升序）整型数组&nbsp;nums 和一个目标值&nbsp;target &nbsp;，写一个函数搜索&nbsp;nums&nbsp;中的 target，如果目标值存在返回下标，否则返回 -1。<br>你可以假设 nums 中的所有元素是不重复的。<br>n 将在 [1, 10000]之间。<br>nums 的每个元素都将在 [-9999, 9999]之间。</p></blockquote><p><strong>示例：</strong></p><blockquote><p><strong>输入:</strong> nums = [-1,0,3,5,9,12], target = 9<br><strong>输出:</strong> 4<br><strong>解释:</strong> 9 出现在 nums 中并且下标为 4</p><p><strong>输入:</strong> nums = [-1,0,3,5,9,12], target = 2<br><strong>输出:</strong> -1<br><strong>解释:</strong> 2 不存在 nums 中因此返回 -1</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span>                <span class="token keyword">return</span> index<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span>                right <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                left <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-1207. 独一无二的出现次数</title>
      <link href="posts/f39bdc82.html"/>
      <url>posts/f39bdc82.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本题地址：</p><blockquote><p><a href="https://leetcode.cn/problems/unique-number-of-occurrences/">leetcode-1207. 独一无二的出现次数</a></p></blockquote><p>题目描述：</p><blockquote><p>给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。<br>如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。<br>1 &lt;= arr.length &lt;= 1000<br>-1000 &lt;= arr[i] &lt;= 1000</p></blockquote><p>示例：</p><blockquote><p>输入：arr = [1,2,2,1,1,3]<br>输出：true<br>解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。</p><p>输入：arr = [1,2]<br>输出：false</p><p>输入：arr = [-3,0,1,-3,1,1,1,-3,10,0]<br>输出：true</p></blockquote><p>题解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">uniqueOccurrences</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count<span class="token punctuation">[</span><span class="token number">2002</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 统计数字出现的频率</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">bool</span> fre<span class="token punctuation">[</span><span class="token number">1002</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 看相同频率是否重复出现</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fre<span class="token punctuation">[</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> fre<span class="token punctuation">[</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-204. 计数质数</title>
      <link href="posts/81dea3c7.html"/>
      <url>posts/81dea3c7.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本题地址：</p><blockquote><p><a href="https://leetcode.cn/problems/count-primes/">leetcode-204. 计数质数</a></p></blockquote><p>题目描述：</p><blockquote><p>给定整数 n ，返回 所有小于非负整数 n 的质数的数量 。<br>0 &lt;= n &lt;= 5 * 10^6</p></blockquote><p>示例：</p><blockquote><p>输入：n = 10<br>输出：4<br>解释：小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</p><p>输入：n = 0<br>输出：0</p><p>输入：n = 1<br>输出：0</p></blockquote><p>题解：<br><strong>埃氏筛</strong><br>该算法由希腊数学家厄拉多塞（Eratosthenes）提出，称为厄拉多塞筛法，简称埃氏筛。<br>我们考虑这样一个事实：如果 x 是质数，那么大于 x 的 倍数 2x,3x,… 一定不是质数.<br>我们设isPrime[i] 表示数 i 是不是质数，如果是质数则为 1，否则为 0。从小到大遍历每个数，如果这个数为质数，则将其所有的倍数都标记为合数（除了该质数本身），即 0，这样在运行结束的时候我们即能知道质数的个数。<br>这里还可以继续优化，对于一个质数 x，如果按上文说的我们从 2x 开始标记其实是冗余的，应该直接从 x⋅x 开始标记，因为 2x,3x,… 这些数一定在 x 之前就被其他数的倍数标记过了，例如 2 的所有倍数，3 的所有倍数等。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>i<span class="token operator">*</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">*</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span>                        isPrime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>线性筛</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://cdn.nlark.com/yuque/0/2022/png/26714929/1661271962799-36f7171d-1f16-466b-9553-55ca2be73601.png#clientId=udf121d42-6673-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=491&amp;id=u2ed197bf&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=614&amp;originWidth=943&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=211298&amp;status=done&amp;style=none&amp;taskId=u6327d4a9-f7df-4e7a-bb4a-71bedfa0573&amp;title=&amp;width=754.4" alt="image.png"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> primes<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                primes<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> primes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">*</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                isPrime<span class="token punctuation">[</span>i <span class="token operator">*</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> primes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-41. 缺失的第一个正数</title>
      <link href="posts/201d9742.html"/>
      <url>posts/201d9742.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本题地址：</p><blockquote><p><a href="https://leetcode.cn/problems/first-missing-positive/">leetcode-41. 缺失的第一个正数</a></p></blockquote><p>题目描述：</p><blockquote><p>给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。<br>请你实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案。<br>1 &lt;= nums.length &lt;= 5 * 10^5<br>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</p></blockquote><p>示例：</p><blockquote><p><strong>输入：</strong>nums = [1,2,0]<br><strong>输出：</strong>3</p><p><strong>输入：</strong>nums = [3,4,-1,1]<br><strong>输出：</strong>2</p><p><strong>输入：</strong>nums = [7,8,9,11,12]<br><strong>输出：</strong>1</p></blockquote><p>题解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">firstMissingPositive</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> length<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token punctuation">[</span><span class="token number">500000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>num<span class="token operator">&lt;=</span>length<span class="token punctuation">)</span>                temp<span class="token punctuation">[</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">500000</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                res<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-692. 前K个高频单词</title>
      <link href="posts/e11a3502.html"/>
      <url>posts/e11a3502.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本题地址：</p><blockquote><p><a href="https://leetcode.cn/problems/top-k-frequent-words/">leetcode-692. 前K个高频单词</a></p></blockquote><p>题目描述：</p><blockquote><p>给定一个单词列表&nbsp;words&nbsp;和一个整数 k ，返回前&nbsp;k&nbsp;个出现次数最多的单词。<br>返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率， 按字典顺序 排序。<br>1 &lt;= words.length &lt;= 500<br>1 &lt;= words[i] &lt;= 10<br>words[i]&nbsp;由小写英文字母组成。<br>k 的取值范围是&nbsp;[1, 不同 words[i] 的数量]</p></blockquote><p>示例：</p><blockquote><p>输入: words = [“i”, “love”, “leetcode”, “i”, “love”, “coding”], k = 2<br>输出: [“i”, “love”]<br>解析: “i” 和 “love” 为出现次数最多的两个单词，均为2次。<br>注意，按字母顺序 “i” 在 “love” 之前。</p><p>输入: [“the”, “day”, “is”, “sunny”, “the”, “the”, “the”, “sunny”, “is”, “is”], k = 4<br>输出: [“the”, “is”, “sunny”, “day”]<br>解析: “the”, “is”, “sunny” 和 “day” 是出现次数最多的四个单词，出现次数依次为 4, 3, 2 和 1 次。</p></blockquote><p>题解：<br>哈希加排序。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">topKFrequent</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> words<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> Map<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>string s <span class="token operator">:</span> words<span class="token punctuation">)</span>            Map<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> vec<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> index <span class="token operator">=</span> Map<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> index <span class="token operator">!=</span> Map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>index<span class="token punctuation">)</span>            vec<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token operator">*</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> vec<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>            <span class="token function">AdjustHeap</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">res</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>            vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> vec<span class="token punctuation">[</span>n <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">AdjustHeap</span><span class="token punctuation">(</span>vec<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">AdjustHeap</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> vec<span class="token punctuation">,</span> <span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> parent <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">int</span> son <span class="token operator">=</span> parent <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>son <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>son <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>vec<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&lt;</span> vec<span class="token punctuation">[</span>son <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">||</span> <span class="token punctuation">(</span>vec<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">==</span> vec<span class="token punctuation">[</span>son <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&amp;&amp;</span> vec<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&gt;</span> vec<span class="token punctuation">[</span>son <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">++</span>son<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>vec<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&lt;</span> vec<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">||</span> <span class="token punctuation">(</span>vec<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">==</span> vec<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&amp;&amp;</span> vec<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&gt;</span> vec<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">,</span> vec<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                parent <span class="token operator">=</span> son<span class="token punctuation">;</span>                son <span class="token operator">=</span> parent <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-202.快乐数</title>
      <link href="posts/57a0e4d.html"/>
      <url>posts/57a0e4d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本题地址：</p><blockquote><p><a href="https://leetcode.cn/problems/happy-number/">leetcode-202.快乐数</a></p></blockquote><p>题目描述：</p><blockquote><p>编写一个算法来判断一个数 n 是不是快乐数。<br>「快乐数」&nbsp;定义为：<br>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。<br>然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。<br>如果这个过程 结果为&nbsp;1，那么这个数就是快乐数。<br>如果 n 是 快乐数 就返回 true ；不是，则返回 false 。<br>1 &lt;= n &lt;= 2^31 - 1</p></blockquote><p>示例：</p><blockquote><p><strong>输入：</strong>n = 19<br><strong>输出：</strong>true<br><strong>解释：</strong>12 + 92 = 82 82 + 22 = 68 62 + 82 = 100 12 + 02 + 02 = 1</p><p><strong>输入：</strong>n = 2<br><strong>输出：</strong>false</p></blockquote><p><strong>题解：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">int</span> hash<span class="token punctuation">[</span><span class="token number">6000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                num<span class="token operator">+=</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                n<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            hash<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            n<span class="token operator">=</span>num<span class="token punctuation">;</span>            num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码随想录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="posts/850f2080.html"/>
      <url>posts/850f2080.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哈希表(hash table)又叫散列表，是一种关联式容器，存储的是一对值，一般是一个key对应一个value(又叫键值对)。数组、链表、栈、队列都是序列式容器，存储的都是一个元素。<br>C++ STL中的map就是一个散列表。</p><h2 id="散列函数："><a href="#散列函数：" class="headerlink" title="散列函数："></a>散列函数：</h2><p>散列函数的要求：</p><ul><li>hash(key)的结果是非负整数(数组下标)</li><li>if(key1==key2)，hash(key1)==hash(key2)</li><li>if(key1!=key2)，hash(key1)!=hash(key2)</li></ul><p>然而实际情况中，第三点是基本做不到的，就算是著名的哈希算法MD5,SHA都难以避免会有不同key算出相同的hash值的情况，又称为哈希冲突。哈希算法有很多种，但是好的哈希算法应该尽量少地出现哈希冲突。</p><h2 id="哈希冲突："><a href="#哈希冲突：" class="headerlink" title="哈希冲突："></a>哈希冲突：</h2><p>解决方法：开放地址法、链表法、建立公共溢出区。</p><h3 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h3><h4 id="（1）线性探测法"><a href="#（1）线性探测法" class="headerlink" title="（1）线性探测法"></a>（1）线性探测法</h4><p>当我们的所需要存放值的位置被占了，我们就往后面一直加1并对m取模直到存在一个空余的地址供我们存放值，取模是为了保证找到的位置在0~m-1的有效空间之中。<br> 存在问题：出现非同义词冲突（两个不想同的哈希值，抢占同一个后续的哈希地址）被称为堆积或聚集现象。<br>公式：</p><blockquote><p>h(x)=(Hash(x)+i)mod (Hashtable.length)（i会逐渐递增加1）</p></blockquote><h4 id="（2）平方探测法（二次探测）"><a href="#（2）平方探测法（二次探测）" class="headerlink" title="（2）平方探测法（二次探测）"></a>（2）平方探测法（二次探测）</h4><p>当我们的所需要存放值的位置被占了，会前后寻找而不是单独方向的寻找。<br>公式：</p><blockquote><p>h(x)=(Hash(x) +k)mod (Hashtable.length)（k依次为+(i^2)和-(i^2)）（i会逐渐递增加1）</p></blockquote><h4 id="（3）再哈希法："><a href="#（3）再哈希法：" class="headerlink" title="（3）再哈希法："></a>（3）再哈希法：</h4><p>同时构造多个不同的哈希函数，等发生哈希冲突时就使用第二个、第三个……等其他的哈希函数计算地址，直到不发生冲突为止。虽然不易发生聚集，但是增加了计算时间。</p><h3 id="链表法"><a href="#链表法" class="headerlink" title="链表法"></a>链表法</h3><p>链表法在数组的每个槽都维护一个链表，当发生散列冲突的时候，存储在链表的结点里，插入、查找、删除的时间复杂就是链表插入、查找、删除的时间复杂度。</p><h3 id="建立公共溢出区"><a href="#建立公共溢出区" class="headerlink" title="建立公共溢出区"></a>建立公共溢出区</h3><p>将哈希表分为基本表和溢出表，将发生冲突的都存放在溢出表中。</p><h3 id="两种方法优缺点比较"><a href="#两种方法优缺点比较" class="headerlink" title="两种方法优缺点比较"></a>两种方法优缺点比较</h3><h4 id="开放地址法："><a href="#开放地址法：" class="headerlink" title="开放地址法："></a>开放地址法：</h4><p><strong>优点：</strong><br>所有数据都存在数组里，可以有效利用CPU缓存<br>所有数据都存在数组里，便于序列化<br><strong>缺点：</strong><br>删除需要使用特殊标志<br>发生冲突时插入查找删除都需要探测，代价较高<br>装载因子不能太大，需要提前申请好内存，这也导致了比链表法更加浪费内存<br><strong>适用情况：</strong><br>数据量小，装载因子小。</p><h4 id="链表法："><a href="#链表法：" class="headerlink" title="链表法："></a>链表法：</h4><p><strong>优点：</strong><br>需要的时候才申请结点而不是一开始就申请好，内存利用率更高<br>对装载因子容忍度高，就算装载因子很大，只要哈希函数分布比较平均，链表长度虽然变长，但是相当于均摊到每一条链表了，所以比起纯数组还是要快。<br>当数据量大时，可以使用红黑树或者跳表代替链表实现优化，使得查找效率从O(n)变成O(logn)。<br><strong>缺点：</strong><br>链表结点在内存中不连续，对CPU缓存不友好<br>需要存储额外的指针，如果存储小的对象会消耗更多的内存，如果存储较大的对象的话指针的消耗可以忽略不计。<br><strong>适用情况：</strong><br>存储大对象，大数据量。</p><h2 id="装载因子"><a href="#装载因子" class="headerlink" title="装载因子"></a>装载因子</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">装载因子loadfactor <span class="token operator">=</span> 填入表中的元素个数 <span class="token operator">/</span> 散列表的长度<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>装载因子越大，说明散列表越满，哈希冲突的概率越大，开放地址法的探测次数增加，链表法的链表长度会增大，导致散列表的性能会下降。<br>  一般我们会为装载因子设置一个阈值，当到达或者超过这个阈值后散列表进行动态扩容。<br>  装载因子的阈值设置需要权衡时间，空间的需求。如果对内存充足，对执行效率性能要求比较高，可以将阈值设置小一点；如果内存紧张，对执行效率性能要求不敏感，可以将阈值设置大一些，甚至可以超过1。Java的HashMap中默认的最大装载因子是0.75。</p><h2 id="动态扩容"><a href="#动态扩容" class="headerlink" title="动态扩容"></a>动态扩容</h2><p>上面说到装载因子达到某个阈值时，散列表需要动态扩容以减小散列冲突：申请更大的数组空间，旧数据重新计算哈希值，搬移到新的空间上。<br>  在实际中，如果我们提供对外服务，在插入某个数据后启动动态扩容，一次性将所有旧数据计算哈希值并搬移到新空间上，可能会导致某一段时间无法响应用户的请求。<br>  因此，在动态扩容时，我们可以先申请空间，但是先不计算哈希值和搬移数据。在需要插入新数据时，我们将新数据插入新的空间，然后从旧散列表中取一个数据计算哈希值插入新的空间里。这样的话在查找的时候也需要兼顾新旧两个散列表，先从新散列表里找，如果找不到再到旧散列表里找。<br>  这种做法我们将动态扩容均摊到插入操作中，每次插入操作的时间复杂度是O(1)，这样的做法会更加地柔和，避免了一次性动态扩容耗时过高。</p><h2 id="实现：（链表法）"><a href="#实现：（链表法）" class="headerlink" title="实现：（链表法）"></a>实现：（链表法）</h2><h3 id="定义链表结点结构体"><a href="#定义链表结点结构体" class="headerlink" title="定义链表结点结构体"></a>定义链表结点结构体</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>string key<span class="token punctuation">;</span>string value<span class="token punctuation">;</span>Item<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>key <span class="token operator">=</span> <span class="token string">"empty"</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>value <span class="token operator">=</span> <span class="token string">"empty"</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">Item</span><span class="token punctuation">(</span>string k<span class="token punctuation">,</span> string v<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>key <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>value <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始化哈希表"><a href="#初始化哈希表" class="headerlink" title="初始化哈希表"></a>初始化哈希表</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> tablesize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Item</span><span class="token operator">*</span> hashtable<span class="token punctuation">[</span>tablesize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitHashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tablesize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>hashtable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">hashFunction</span><span class="token punctuation">(</span>string key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> key<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>sum <span class="token operator">+=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> sum <span class="token operator">%</span> tablesize<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在链表中的位置"><a href="#在链表中的位置" class="headerlink" title="在链表中的位置"></a>在链表中的位置</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">NumOfList</span><span class="token punctuation">(</span>string keys<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hashFunction</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Item</span><span class="token operator">*</span> temp <span class="token operator">=</span> hashtable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>key <span class="token operator">!=</span> keys<span class="token punctuation">)</span><span class="token punctuation">{</span>temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token operator">++</span>num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>这里需要注意的是，数组的槽里的结点是不存储数据的，也就是table[i]这个结点是不存储数据的，可以理解成是一个哨兵，table[i]-&gt;next所指向的结点才是第一个存储数据的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">AddItem</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> string value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">hashFunction</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Item</span><span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Item</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> hashtable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>hashtable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>计算哈希值，然后遍历链表。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">FindValue</span><span class="token punctuation">(</span>string key<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>index <span class="token operator">=</span> <span class="token function">hashFunction</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token function">NumOfList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>先找这个结点，找到了就删除这个结点。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">DeleteItem</span><span class="token punctuation">(</span>string key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">FindValue</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Item</span><span class="token operator">*</span> temp <span class="token operator">=</span> hashtable<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆</title>
      <link href="posts/fab451a5.html"/>
      <url>posts/fab451a5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="堆基础"><a href="#堆基础" class="headerlink" title="堆基础"></a>堆基础</h2><h3 id="二叉堆（以大根堆为例）："><a href="#二叉堆（以大根堆为例）：" class="headerlink" title="二叉堆（以大根堆为例）："></a>二叉堆（以大根堆为例）：</h3><h4 id="堆的数据结构："><a href="#堆的数据结构：" class="headerlink" title="堆的数据结构："></a>堆的数据结构：</h4><p>堆一般使用<strong>数组</strong>存储。当堆中有n个元素的时，可以将这些元素存放在数组heap的前n个单元里，其中堆的根节点中元素存放在heap[1]中。结点之间的关系有两种情况：</p><ul><li>如果根节点在数组中的位置是1，那么第i个位置的左右节点下标分别为2i、2i+1，父节点下标为 i/2。</li><li>如果根节点在数组中的位置是0，那么第i个位置的左右节点下标分别为2i+1、2i+2，父节点下标为 (i-1)/2。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Heap</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//EType为自定义类型</span><span class="token keyword">int</span> <span class="token operator">*</span>heap<span class="token punctuation">;</span> <span class="token comment">//存放数据的空间，下标从1开始存储数据，下标为0的作为工作空间，存储临时数据。</span><span class="token keyword">int</span> HeapSize<span class="token punctuation">;</span> <span class="token comment">//HeapSize是堆元素的个数</span><span class="token keyword">int</span> MaxSize<span class="token punctuation">;</span> <span class="token comment">//MaxSize是堆中最多存放元素数量</span><span class="token function">Heap</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxsize<span class="token punctuation">)</span>  <span class="token comment">//init</span><span class="token punctuation">{</span>MaxSize <span class="token operator">=</span> maxsize<span class="token punctuation">;</span>HeapSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxsize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">~</span><span class="token function">Heap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//free memory</span><span class="token punctuation">{</span><span class="token keyword">delete</span> heap<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="初始化堆："><a href="#初始化堆：" class="headerlink" title="初始化堆："></a>初始化堆：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> Maxsize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> Heap <span class="token operator">*</span>H <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Heap</span><span class="token punctuation">(</span>Maxsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="交换堆中元素："><a href="#交换堆中元素：" class="headerlink" title="交换堆中元素："></a>交换堆中元素：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//把堆中的a,b位置的值互换 </span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Heap <span class="token operator">&amp;</span>H<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//临时存储child位置的值 </span><span class="token keyword">int</span> temp <span class="token operator">=</span> H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//把index的值赋给child的位置 </span>H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//把原来的child位置的数值赋值给index位置 </span>H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="向上调整："><a href="#向上调整：" class="headerlink" title="向上调整："></a>向上调整：</h4>递归实现：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">HeapUp</span><span class="token punctuation">(</span>Heap <span class="token operator">&amp;</span>H<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//注意由于数值是从下标为1开始，当index = 1的时候，已经是根节点了 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//求出父亲的节点 </span><span class="token keyword">int</span> parent <span class="token operator">=</span> index <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//获取相应位置的数值 </span><span class="token keyword">int</span> parentValue <span class="token operator">=</span> H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> indexValue <span class="token operator">=</span> H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//如果父亲节点比index的数值小，就交换二者的数值 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>parentValue <span class="token operator">&lt;</span> indexValue<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//交换数值 </span><span class="token function">swap</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归调用 </span><span class="token function">HeapUp</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>非递归实现：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">HeapUp</span><span class="token punctuation">(</span>Heap <span class="token operator">&amp;</span>H<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//获取index的父节点的下标 </span>parent <span class="token operator">=</span> index <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//获得父节点的值 </span><span class="token keyword">int</span> parentValue <span class="token operator">=</span> H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获得index位置的值 </span><span class="token keyword">int</span> indexValue <span class="token operator">=</span> H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//如果父节点的值小就交换 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>parentValue <span class="token operator">&lt;</span> indexValue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">swap</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>index <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="向下调整："><a href="#向下调整：" class="headerlink" title="向下调整："></a>向下调整：</h4>递归实现：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">HeapDown</span><span class="token punctuation">(</span>Heap <span class="token operator">&amp;</span>H<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n <span class="token operator">=</span> H<span class="token punctuation">.</span>HeapSize<span class="token punctuation">;</span><span class="token comment">//记录最大的那个儿子节点的位置 </span><span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//2*index&gt;n说明该节点没有左右儿子节点了，那么就返回 </span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果只有一个儿子（左儿子节点） </span>child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果左右儿子都存在 </span><span class="token comment">//定义左儿子节点 </span>child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index<span class="token punctuation">;</span><span class="token comment">//如果左儿子小于右儿子的数值，取右儿子的下标 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>child<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&gt;</span> H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//交换堆中的child，和index位置的值 </span><span class="token function">swap</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> child<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//完成交换后递归调用，继续下降 </span><span class="token function">HeapDown</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>非递归实现：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">HeapDown</span><span class="token punctuation">(</span>Heap <span class="token operator">&amp;</span>H<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//存储左儿子的位置 </span><span class="token keyword">int</span> temp <span class="token operator">=</span> H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> H<span class="token punctuation">.</span>HeapSize<span class="token punctuation">;</span><span class="token comment">//如果有儿子的话 </span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//获取左儿子的位置 </span>child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index<span class="token punctuation">;</span><span class="token comment">//如果有右儿子且右儿子数值比左儿子大 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">&lt;</span> n<span class="token operator">&amp;&amp;</span>H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>child <span class="token operator">=</span> child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//如果数值最大的儿子比temp的值大 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">swap</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> index<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>index <span class="token operator">=</span> child<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入元素："><a href="#插入元素：" class="headerlink" title="插入元素："></a>插入元素：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Heap <span class="token operator">&amp;</span>H<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果堆没满,堆数据数量加一，最后一个位置放入新数据</span><span class="token keyword">if</span> <span class="token punctuation">(</span>H<span class="token punctuation">.</span>HeapSize <span class="token operator">&lt;</span> H<span class="token punctuation">.</span>MaxSize<span class="token punctuation">)</span><span class="token punctuation">{</span>H<span class="token punctuation">.</span>HeapSize<span class="token operator">++</span><span class="token punctuation">;</span>H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>H<span class="token punctuation">.</span>HeapSize<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token comment">//最后一个数据上升到合适位置</span><span class="token function">HeapUp</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> H<span class="token punctuation">.</span>HeapSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除元素："><a href="#删除元素：" class="headerlink" title="删除元素："></a>删除元素：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">oid <span class="token function">Delete</span><span class="token punctuation">(</span>Heap <span class="token operator">&amp;</span>H<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//把最后的一个叶子的数值赋值给index位置 </span>H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span>H<span class="token punctuation">.</span>HeapSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//堆元素个数减一</span>H<span class="token punctuation">.</span>HeapSize<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//index节点下沉到合适位置</span><span class="token function">HeapDown</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调整堆："><a href="#调整堆：" class="headerlink" title="调整堆："></a>调整堆：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Adjust</span><span class="token punctuation">(</span>Heap <span class="token operator">&amp;</span>H<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//从第Heapsize/2个元素到第1个元素逐个HeapDown</span><span class="token keyword">int</span> n <span class="token operator">=</span> H<span class="token punctuation">.</span>HeapSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">HeapDown</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span>n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="堆排序："><a href="#堆排序：" class="headerlink" title="堆排序："></a>堆排序：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">HeapSort</span><span class="token punctuation">(</span>Heap <span class="token operator">&amp;</span>H<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">Insert</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>H<span class="token punctuation">.</span>HeapSize <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> H<span class="token punctuation">.</span>heap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">Delete</span><span class="token punctuation">(</span>H<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="d叉堆："><a href="#d叉堆：" class="headerlink" title="d叉堆："></a>d叉堆：</h3>d叉堆与二叉堆的区别是d叉堆是完全d叉树。</li></ul><table><thead><tr><th>操作</th><th>二叉堆</th><th>d叉堆</th></tr></thead><tbody><tr><td>insert</td><td>O(logN)</td><td>O(log(d)N)</td></tr><tr><td>delete</td><td>O(logN)</td><td>O(d*log(d)N)</td></tr><tr><td>merge</td><td>O(N*logN)</td><td>O(N*log(d)N)</td></tr></tbody></table><h2 id="堆进阶"><a href="#堆进阶" class="headerlink" title="堆进阶"></a>堆进阶</h2><p><a href="https://blog.csdn.net/gdut2015go/article/details/46706323">https://blog.csdn.net/gdut2015go/article/details/46706323</a></p><h3 id="左偏树："><a href="#左偏树：" class="headerlink" title="左偏树："></a>左偏树：</h3><h3 id="Skewed-Heap："><a href="#Skewed-Heap：" class="headerlink" title="Skewed Heap："></a>Skewed Heap：</h3><h3 id="Van-Emde-Boas-Tree："><a href="#Van-Emde-Boas-Tree：" class="headerlink" title="Van Emde Boas Tree："></a>Van Emde Boas Tree：</h3>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字典树</title>
      <link href="posts/eea60a6a.html"/>
      <url>posts/eea60a6a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>字典树（Trie树），又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。Trie的核心思想是空间换时间。利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。</p><h3 id="字典树3个基本性质"><a href="#字典树3个基本性质" class="headerlink" title="字典树3个基本性质"></a><strong>字典树3个基本性质</strong></h3><ul><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</li><li>每个节点的所有子节点包含的字符都不相同。</li></ul><p>trie树每一层的节点数是<strong>26^i</strong>级别的。所以为了节省空间。用动态链表，或者用数组来模拟动态。空间的花费，不会超过<strong>单词数×单词长度。</strong></p><h3 id="字典树优缺点"><a href="#字典树优缺点" class="headerlink" title="字典树优缺点"></a>字典树优缺点</h3><p>优点：<br>1、插入，查询，删除等操作复杂度为O(h),其中h为单词的长度。为什么会这么快呢，本质是空间换时间（空间复杂度为26的h次方），利用指针来避免做其他不必要的查找。（初始化的时间复杂度为n O(h),n为单词个数）<br>2、当储存大量单词或者说储存的单词有着共同前缀时节省了空间。（比如说用线性存储boy,boyfriend如用trie存储的差别）<br>缺点：<br>指针占用的空间，空间复杂度大。如果储存少量的单词，并不能节省空间。</p><h2 id="字典树的应用"><a href="#字典树的应用" class="headerlink" title="字典树的应用"></a>字典树的应用</h2><ul><li> 字符串检索：事先将已知的一些字符串（字典）的有关信息保存到trie树里，查找另外一些未知字符串是否出现过或者出现频率。</li><li>字符串最长公共前缀（转化为寻找共同祖先问题）。<h2 id="与哈希的比较"><a href="#与哈希的比较" class="headerlink" title="与哈希的比较"></a>与哈希的比较</h2><table><thead><tr><th></th><th>Tire</th><th>Hash</th></tr></thead><tbody><tr><td>初始化</td><td>nO(h)</td><td>O(n)</td></tr><tr><td>查询、插入、删除</td><td>O(h)</td><td>O(1)</td></tr><tr><td>空间复杂度</td><td>26^h</td><td>n</td></tr><tr><td>查询公共前缀单词</td><td>O(h)</td><td>O(n)</td></tr><tr><td>词频统计</td><td>nO(h)</td><td>O(n)</td></tr><tr><td>能否节省空间</td><td>Yes</td><td>No</td></tr></tbody></table></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="字典树结构体"><a href="#字典树结构体" class="headerlink" title="字典树结构体"></a>字典树结构体</h3><p>TrieNode的结点结构中没有直接使用一个成员来保存结点值。而是使用字母映射表next，next中保存了对当前结点而言下一个可能出现的字符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">TrieNode</span> <span class="token punctuation">{</span>    <span class="token keyword">bool</span> isend<span class="token punctuation">;</span><span class="token comment">//字符串结束标志</span>    TrieNode<span class="token operator">*</span> next<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//字母映射表</span>    <span class="token function">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-&gt;</span>isend <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>从根节点开始遍历，如果当前结点的字母映射表next中不存在word[i]，则在当前结点的next[word[i]]处建立一个新的结点，并将当前结点移动到next[word[i]]处，直到将word全部插入，还要将最后一个结点的isend置为true。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span><span class="token punctuation">{</span>    TrieNode<span class="token operator">*</span> temp <span class="token operator">=</span> Trie<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp<span class="token operator">-&gt;</span>isend <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>查找word是否存在于Trie中 (注：查找必须要在到达word最后一个字符时，字典树也到达isend为true 的结点，也就是说word不能以前缀的形式存在于Trie中)。<br>从字典树的根节点开始，与word中的字符进行匹配，如果不存在word中某个字符的映射，则说明字典树中不包含这个单词，返回false。将word遍历完后若没有返回false，再判断isend是否为true。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">Find</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span><span class="token punctuation">{</span>    TrieNode<span class="token operator">*</span> temp <span class="token operator">=</span> Trie<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp<span class="token operator">-&gt;</span>isend<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前缀匹配"><a href="#前缀匹配" class="headerlink" title="前缀匹配"></a>前缀匹配</h3><p>与查找相比，前缀匹配只要求word在字典树的一条根节点开始的分支中。所以我们不再需要判断isend的值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">prefix</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span><span class="token punctuation">{</span>    TrieNode<span class="token operator">*</span> temp <span class="token operator">=</span> Trie<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> word<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="posts/c517589e.html"/>
      <url>posts/c517589e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="并查集基础"><a href="#并查集基础" class="headerlink" title="并查集基础"></a>并查集基础</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>并查集是一种树型的数据结构，主要用于处理一些不相交集合的合并及查询问题（即所谓的并、查）。一些常见的用途有连通子图、最小生成树的Kruskal算法和求最近公共祖先等。</p></blockquote><h3 id="并查集的实现与优化"><a href="#并查集的实现与优化" class="headerlink" title="并查集的实现与优化"></a>并查集的实现与优化</h3><p><strong>并查集的原理：</strong></p><ul><li>每个集合用一棵树来表示。树根的编号就是整个集合的编号。每个节点存储它的父节点，pre[x]表示x的父节点。</li><li>如果x为树根的话，pre[x]=x （x的父节点指向自己）</li><li>求x的集合编号（x的祖宗节点）：while(pre[x] != x ) x = pre[x];</li><li>合并两个集合，将x的根节点嫁接到y的根节点，如：prex是x的集合编号，prey是y的集合编号，嫁接：pre[prex]= prey;<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//全名为 father，父节点的意思</span><span class="token comment">//初始化 n个元素 </span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//使每个元素的根节点是其本身</span>    <span class="token comment">//即初始时每个元素都是单独的 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//查询树的根</span><span class="token comment">//非递归实现</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span>   <span class="token comment">//直到元素的父节点是它本身，表示已经查询到了树的根</span>i <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment">//返回根节点对应的元素 </span><span class="token punctuation">}</span><span class="token comment">//递归实现</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">)</span>      <span class="token comment">//若元素的根节点为其本身，那么此元素就是树的根 </span><span class="token keyword">return</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//直接返回元素本身即可</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token function">Find</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//否则继续查询，知道查询到树的根位置 </span><span class="token punctuation">}</span><span class="token comment">//简化版</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>i <span class="token operator">?</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">Find</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//合并</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//先找到两个元素对应的根对应的元素 </span><span class="token keyword">int</span> fa <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> fb <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token operator">==</span>fb<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">else</span> f<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token operator">=</span>fb<span class="token punctuation">;</span>  <span class="token comment">//否则令元素 a的根指向元素 b的根 </span><span class="token punctuation">}</span> <span class="token comment">//简化版</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>f<span class="token punctuation">[</span><span class="token function">Find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><h4 id="优化1：按秩合并"><a href="#优化1：按秩合并" class="headerlink" title="优化1：按秩合并"></a>优化1：按秩合并</h4>首先，我们合并时，可记录这棵树的高度（记为rank）。接下来当我们需合并两棵树时，我们先对两棵树的高度进行判断，如不同，则让高度小的树的根指向高度大的根。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//初始化优化</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//全名为 height</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//令每棵树的高度初始值都为 0 </span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//合并优化</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> fa <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fb <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token operator">==</span>fb<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>fb<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>  <span class="token comment">//如果元素 a对应的树的高度比 b小 </span>f<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">=</span> fb<span class="token punctuation">;</span>  <span class="token comment">//使元素 a的根指向元素 b的根 </span><span class="token punctuation">}</span>     <span class="token keyword">else</span>     <span class="token punctuation">{</span>f<span class="token punctuation">[</span>fb<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span>  <span class="token comment">//否则让元素 b的根指向元素 a的根 </span><span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">==</span> h<span class="token punctuation">[</span>fb<span class="token punctuation">]</span><span class="token punctuation">)</span> h<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 如果两者对应的树的高度相同，则使新生成的树高度 +1 </span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优化2：路径压缩"><a href="#优化2：路径压缩" class="headerlink" title="优化2：路径压缩"></a>优化2：路径压缩</h4>由于查询时我们需沿着元素所在的树从下往上查询，最终找到这棵树的根，表明这个元素与其根对应元素属于同一组。因为在此查询过程中我们会经过许多节点，而如果我们能将这个元素直接指向根节点，那么就能节省许多查询的时间。同时，在查询过程中，每次经过的节点，我们都可以同时将他们一起直接指向根节点。这样做的话，我们再查询这些节点时，就能很快知道他们的根是谁了。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//查询优化</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>i <span class="token operator">?</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使元素直接指向树的根 </span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最终代码实现"><a href="#最终代码实现" class="headerlink" title="最终代码实现"></a>最终代码实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>i <span class="token operator">?</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Find</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> fa <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fb <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>fa <span class="token operator">!=</span> fb<span class="token punctuation">)</span>     <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>fb<span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>f<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">=</span> fb<span class="token punctuation">;</span><span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>f<span class="token punctuation">[</span>fb<span class="token punctuation">]</span> <span class="token operator">=</span> fa<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>fa<span class="token punctuation">]</span> <span class="token operator">==</span> h<span class="token punctuation">[</span>fb<span class="token punctuation">]</span><span class="token punctuation">)</span> h<span class="token punctuation">[</span>fa<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="并查集入门模板题"><a href="#并查集入门模板题" class="headerlink" title="并查集入门模板题"></a>并查集入门模板题</h3><a href="https://blog.csdn.net/weixin_51250927/article/details/113621645">https://blog.csdn.net/weixin_51250927/article/details/113621645</a><h2 id="并查集进阶"><a href="#并查集进阶" class="headerlink" title="并查集进阶"></a>并查集进阶</h2><h3 id="带权并查集"><a href="#带权并查集" class="headerlink" title="带权并查集"></a>带权并查集</h3><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4>带权是指一个元素具有额外的信息。比如元素1对应着数值6，元素2对应着数值4。这些带有信息的元素组成的并查集即为带权并查集。<h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4>带权并查集能计算各个小组中元素的个数、能计算n个元素中还有几个元素没有加入小组中；计算分数、距离等等<br>注释：带权并查集需要在路径优化的基础下进行。<br>带权并查集模板题：<br><a href="https://blog.csdn.net/weixin_51250927/article/details/113620822">https://blog.csdn.net/weixin_51250927/article/details/113620822</a><h3 id="种类并查集"><a href="#种类并查集" class="headerlink" title="种类并查集"></a>种类并查集</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义;"></a>定义;</h4>种类并查集是能把并查集分为几个部分，每个部分的种类不同。<h4 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h4>种类并查集能将两个阵容分开。比如把好人和坏人分为两个阵营。<br><a href="https://blog.csdn.net/weixin_51250927/article/details/113617248">https://blog.csdn.net/weixin_51250927/article/details/113617248</a><br><a href="https://blog.csdn.net/weixin_51250927/article/details/113619285">https://blog.csdn.net/weixin_51250927/article/details/113619285</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode题目表</title>
      <link href="posts/94f69fa5.html"/>
      <url>posts/94f69fa5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Part1-基础题"><a href="#Part1-基础题" class="headerlink" title="Part1-基础题"></a>Part1-基础题</h1><h2 id="基础题-一维数组"><a href="#基础题-一维数组" class="headerlink" title="基础题-一维数组"></a>基础题-一维数组</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>1、两数之和</td><td>Easy</td><td></td></tr><tr><td>15、三数之和</td><td>Easy</td><td></td></tr><tr><td>16、最接近的三数之和</td><td>Easy</td><td></td></tr><tr><td>18、四数之和</td><td>Easy</td><td></td></tr><tr><td>217、存在重复元素</td><td>Easy</td><td></td></tr><tr><td>219、存在重复元素II</td><td>Easy</td><td></td></tr><tr><td>228、汇总区间</td><td>Easy</td><td></td></tr><tr><td>280、摆动排序</td><td>Easy</td><td></td></tr><tr><td>349、两个数组的交集</td><td>Easy</td><td></td></tr><tr><td>350、两个数组的交集</td><td>Easy</td><td></td></tr><tr><td>414、第三大的数</td><td>Easy</td><td></td></tr><tr><td>581、最短无序连续子数组</td><td>Easy</td><td></td></tr><tr><td>605、种花问题 也是很不错的题目</td><td>Easy</td><td></td></tr><tr><td>628、三个数的最大乘积</td><td>Easy</td><td></td></tr><tr><td>643、子数组最大平均数 I</td><td>Easy</td><td></td></tr><tr><td>665、非递减数列 很好的题</td><td>Easy</td><td></td></tr><tr><td>674、最长连续递增序列</td><td>Easy</td><td></td></tr><tr><td>697、数组的度</td><td>Easy</td><td></td></tr><tr><td>717、1比特与2比特字符</td><td>Easy</td><td></td></tr><tr><td>724、寻找数组的中心索引</td><td>Easy</td><td></td></tr><tr><td>747、至少是其他数字两倍的最大数</td><td>Easy</td><td></td></tr><tr><td>849、到最近的人的最大距离 好题</td><td>Easy</td><td></td></tr><tr><td>914、卡牌分组 这也是道好题</td><td>Easy</td><td></td></tr><tr><td>989、数组形式的整数加法</td><td>Easy</td><td></td></tr><tr><td>1128、等价多米诺骨牌对的数量</td><td>Easy</td><td></td></tr><tr><td>11、盛最多水的容器</td><td>Medium</td><td></td></tr><tr><td>42、接雨水</td><td>Medium</td><td></td></tr><tr><td>128、最长连续序列</td><td>Medium</td><td></td></tr><tr><td>189、旋转数组</td><td>Medium</td><td></td></tr><tr><td>324、摆动排序II</td><td>Medium</td><td></td></tr><tr><td>442、数组中重复的数据</td><td>Medium</td><td></td></tr><tr><td>457、环形数组是否存在循环</td><td>Medium</td><td></td></tr><tr><td>611、有效三角形的个数</td><td>Medium</td><td></td></tr><tr><td>31、下一个排列 (7+)</td><td>Hard</td><td></td></tr><tr><td>41、缺失的第一个正数 (7+)</td><td>Hard</td><td></td></tr></tbody></table><h2 id="基础题-二维矩阵"><a href="#基础题-二维矩阵" class="headerlink" title="基础题-二维矩阵"></a>基础题-二维矩阵</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>36 有效的数独</td><td>Easy</td><td></td></tr><tr><td>554 砖墙</td><td>Easy</td><td></td></tr><tr><td>48 旋转图像</td><td>Medium</td><td></td></tr><tr><td>54 螺旋矩阵</td><td>Medium</td><td></td></tr><tr><td>59 螺旋矩阵II</td><td>Medium</td><td></td></tr><tr><td>73 矩阵置零</td><td>Medium</td><td></td></tr><tr><td>240 搜索二维矩阵</td><td>Medium</td><td><a href="https://pass_co2.gitee.io/posts/234bb906.html">剑指 Offer 04. 二维数组中的查找</a></td></tr><tr><td>289 生命游戏</td><td>Medium</td><td></td></tr><tr><td>419 甲板上的战舰</td><td>Medium</td><td></td></tr><tr><td>463 岛屿周长</td><td>Medium</td><td></td></tr><tr><td>498 对角线遍历</td><td>Medium</td><td></td></tr><tr><td>723 粉碎糖果</td><td>Medium</td><td></td></tr><tr><td>1706 球会落何处</td><td>Medium</td><td></td></tr></tbody></table><h2 id="基础题-字符串"><a href="#基础题-字符串" class="headerlink" title="基础题-字符串"></a>基础题-字符串</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>6、Z字变换</td><td>Easy</td><td></td></tr><tr><td>13、罗马数字转整数</td><td>Easy</td><td></td></tr><tr><td>49、字母异位词分组</td><td>Easy</td><td></td></tr><tr><td>58、最后一个单词的长度</td><td>Easy</td><td></td></tr><tr><td>67、二进制求和</td><td>Easy</td><td></td></tr><tr><td>125、验证回文串</td><td>Easy</td><td></td></tr><tr><td>151、翻转字符串里的单词</td><td>Easy</td><td></td></tr><tr><td>165、比较版本号</td><td>Easy</td><td></td></tr><tr><td>205、同构字符串</td><td>Easy</td><td></td></tr><tr><td>290、单词规律</td><td>Easy</td><td></td></tr><tr><td>299、猜数字游戏</td><td>Easy</td><td></td></tr><tr><td>344、反转字符串</td><td>Easy</td><td></td></tr><tr><td>383、赎金信</td><td>Easy</td><td></td></tr><tr><td>392、判断子序列</td><td>Easy</td><td></td></tr><tr><td>434、字符串中的单词数</td><td>Easy</td><td></td></tr><tr><td>482、密钥格式化</td><td>Easy</td><td></td></tr><tr><td>680、验证回文字符串 Ⅱ</td><td>Easy</td><td></td></tr><tr><td>686、重复叠加字符串匹配</td><td>Easy</td><td></td></tr><tr><td>819、最常见的单词</td><td>Easy</td><td></td></tr><tr><td>859、亲密字符串</td><td>Easy</td><td></td></tr><tr><td>8、字符串转换整数</td><td>Medium</td><td></td></tr><tr><td>17、电话号码的字母组合</td><td>Medium</td><td></td></tr><tr><td>65、有效数字</td><td>Medium</td><td></td></tr><tr><td>165、比较版本号</td><td>Medium</td><td></td></tr><tr><td>1332、删除回文子序列</td><td>Medium</td><td></td></tr><tr><td>2047、句子中有效的单词数</td><td>Medium</td><td></td></tr><tr><td>777、在LR字符串中交换相邻字符</td><td>Hard</td><td></td></tr></tbody></table><h1 id="Part2-数据结构题"><a href="#Part2-数据结构题" class="headerlink" title="Part2-数据结构题"></a>Part2-数据结构题</h1><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>2 两数相加</td><td>Easy</td><td></td></tr><tr><td>19 删除链表的倒数第N个结点</td><td>Easy</td><td></td></tr><tr><td>21 合并两个有序链表</td><td>Easy</td><td></td></tr><tr><td>61、旋转链表</td><td>Easy</td><td></td></tr><tr><td>82、删除排序链表中的重复元素</td><td>Easy</td><td></td></tr><tr><td>83、删除排序链表中的重复元素</td><td>Easy</td><td></td></tr><tr><td>86、分隔链表</td><td>Easy</td><td></td></tr><tr><td>141、环形链表</td><td>Easy</td><td></td></tr><tr><td>147、对链表进行插入排序</td><td>Easy</td><td></td></tr><tr><td>206、反转链表</td><td>Easy</td><td></td></tr><tr><td>237、删除链表中的节点</td><td>Easy</td><td></td></tr><tr><td>369 单链表加一</td><td>Easy</td><td></td></tr><tr><td>445 两数相加II</td><td>Easy</td><td></td></tr><tr><td>707 设计链表</td><td>Easy</td><td></td></tr><tr><td>23 合并K个升序链表</td><td>Medium</td><td></td></tr><tr><td>24 两两交换链表中的节点</td><td>Medium</td><td></td></tr><tr><td>25 K个一组翻转链表</td><td>Medium</td><td></td></tr><tr><td>138 复制带随机指针的链表</td><td>Medium</td><td></td></tr><tr><td>142 环形链表II</td><td>Medium</td><td></td></tr><tr><td>148 排序链表</td><td>Medium</td><td></td></tr><tr><td>160 相交链表</td><td>Medium</td><td></td></tr><tr><td>234 回文链表</td><td>Medium</td><td></td></tr><tr><td>328 奇偶链表</td><td>Medium</td><td></td></tr></tbody></table><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="二叉树-树结构与基础算法"><a href="#二叉树-树结构与基础算法" class="headerlink" title="二叉树-树结构与基础算法"></a>二叉树-树结构与基础算法</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>94、二叉树的中序遍历</td><td>Easy</td><td></td></tr><tr><td>95、不同的二叉搜索树 II</td><td>Easy</td><td></td></tr><tr><td>96、不同的二叉搜索树</td><td>Easy</td><td></td></tr><tr><td>98、验证二叉搜索树</td><td>Easy</td><td></td></tr><tr><td>99、恢复二叉搜索树</td><td>Easy</td><td></td></tr><tr><td>100、相同的树</td><td>Easy</td><td></td></tr><tr><td>101、对称二叉树</td><td>Easy</td><td></td></tr><tr><td>102、二叉树的层序遍历</td><td>Easy</td><td></td></tr><tr><td>103、二叉树的锯齿形层序遍历</td><td>Easy</td><td></td></tr><tr><td>104、二叉树的最大深度</td><td>Easy</td><td></td></tr><tr><td>105、从前序与中序遍历序列构造二叉树</td><td>Easy</td><td><a href="https://pass_co2.gitee.io/posts/ba42e8bc.html">剑指 Offer 07. 重建二叉树</a></td></tr><tr><td>106、从中序与后序遍历序列构造二叉树</td><td>Easy</td><td></td></tr><tr><td>107、二叉树的层序遍历 II</td><td>Easy</td><td></td></tr><tr><td>108、将有序数组转换为二叉搜索树</td><td>Easy</td><td></td></tr><tr><td>109、有序链表转换二叉搜索树</td><td>Easy</td><td></td></tr><tr><td>110、平衡二叉树</td><td>Easy</td><td></td></tr><tr><td>111、二叉树的最小深度</td><td>Easy</td><td></td></tr><tr><td>112、路径总和</td><td>Easy</td><td></td></tr><tr><td>113、路径总和 II</td><td>Easy</td><td></td></tr><tr><td>114、二叉树展开为链表</td><td>Medium</td><td></td></tr><tr><td>226 翻转二叉树</td><td>Easy</td><td></td></tr><tr><td>314 二叉树的垂直遍历</td><td>Easy</td><td></td></tr><tr><td>144 二叉树的前序遍历</td><td>递归：Easy    迭代：Medium</td><td></td></tr><tr><td>116、填充每个节点的下一个右侧节点指针</td><td>Medium</td><td></td></tr><tr><td>117、填充每个节点的下一个右侧节点指针 II</td><td>Medium</td><td></td></tr><tr><td>222 完全二叉树的节点个数</td><td>Medium</td><td></td></tr><tr><td>230 二叉搜索树的第K小元素</td><td>Medium</td><td></td></tr><tr><td>236 二叉树的最近公共祖先</td><td>Medium</td><td></td></tr><tr><td>297 二叉树的序列化与反序列化</td><td>Medium</td><td></td></tr><tr><td>331 验证二叉树的前序序列化</td><td>Medium</td><td></td></tr><tr><td>662 二叉树最大宽度</td><td>Medium</td><td></td></tr><tr><td>889 前序与后序序列构造二叉树</td><td>Medium</td><td></td></tr><tr><td>145 二叉树的后序遍历</td><td>递归：Easy    迭代：Hard</td><td></td></tr></tbody></table><h3 id="二叉树-树形DP"><a href="#二叉树-树形DP" class="headerlink" title="二叉树-树形DP"></a>二叉树-树形DP</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>124 二叉树中的最大路径和</td><td>Medium</td><td></td></tr><tr><td>333 最大BST子树</td><td>Medium</td><td></td></tr><tr><td>337 打家劫舍III</td><td>Medium</td><td></td></tr><tr><td>687 最长同值路径</td><td>Medium</td><td></td></tr><tr><td>2313 二叉树得到结果的最少翻转次数</td><td>Medium</td><td></td></tr><tr><td>968 监控二叉树</td><td>Hard</td><td></td></tr></tbody></table><h3 id="多叉树"><a href="#多叉树" class="headerlink" title="多叉树"></a>多叉树</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>429 N叉树的层序遍历</td><td>Easy</td><td></td></tr><tr><td>427 建立四叉树</td><td>Medium</td><td></td></tr><tr><td>428 序列化和反序列化N叉树</td><td>Medium</td><td></td></tr><tr><td>1490 克隆N叉树</td><td>Medium</td><td></td></tr><tr><td>1516 移动N叉树的子树</td><td>Medium</td><td></td></tr><tr><td>1522 N叉树的直径</td><td>Medium</td><td></td></tr><tr><td>431 将N叉树编码为二叉树</td><td>Hard</td><td></td></tr></tbody></table><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="图-图结构与基础图算法"><a href="#图-图结构与基础图算法" class="headerlink" title="图-图结构与基础图算法"></a>图-图结构与基础图算法</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>323 无向图中连通分量的数目</td><td>Easy</td><td></td></tr><tr><td>547 省份数量</td><td>Easy</td><td></td></tr><tr><td>797 所有可能的路径</td><td>Easy</td><td></td></tr><tr><td>1971 寻找图中是否存在路径</td><td>Easy</td><td></td></tr><tr><td>133 克隆图</td><td>Medium</td><td></td></tr><tr><td>261 以图判树</td><td>Medium</td><td></td></tr><tr><td>332 重新安排行程</td><td>Medium</td><td></td></tr><tr><td>743 网络延迟时间</td><td>Medium</td><td></td></tr><tr><td>785 判断二分图</td><td>Medium</td><td></td></tr><tr><td>787 K站中转内最便宜的航班</td><td>Medium</td><td></td></tr><tr><td>802 找到最终的安全状态</td><td>Medium</td><td></td></tr><tr><td>847 访问所有节点的最短路径</td><td>Medium</td><td></td></tr><tr><td>1719 重构一棵树的方案数</td><td>very Hard</td><td></td></tr></tbody></table><h3 id="图-最短路"><a href="#图-最短路" class="headerlink" title="图-最短路"></a>图-最短路</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>1334 阈值距离内邻居最少的城市</td><td>Medium</td><td></td></tr><tr><td>1976 到达目的地的方案数</td><td>Hard</td><td></td></tr><tr><td>2203 得到要求路径的最小带权子图</td><td>Hard</td><td></td></tr></tbody></table><h3 id="图-拓扑排序"><a href="#图-拓扑排序" class="headerlink" title="图-拓扑排序"></a>图-拓扑排序</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>207 课程表</td><td>Medium</td><td></td></tr><tr><td>210 课程表II</td><td>Medium</td><td></td></tr><tr><td>269 火星词典</td><td>Medium</td><td></td></tr><tr><td>2050 并行课程III</td><td>Medium</td><td></td></tr><tr><td>310 最小高度树</td><td>Hard</td><td></td></tr><tr><td>444 序列重建</td><td>Hard</td><td></td></tr><tr><td>2127 参加会议的最多员工数</td><td>very Hard</td><td></td></tr></tbody></table><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="栈-基础"><a href="#栈-基础" class="headerlink" title="栈-基础"></a>栈-基础</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>20、有效的括号 (3)</td><td>Easy</td><td></td></tr><tr><td>71、简化路径 (3)</td><td>Easy</td><td></td></tr><tr><td>150、逆波兰表达式求值 (5-)</td><td>Medium</td><td></td></tr><tr><td>155、最小栈 (4-)</td><td>Medium</td><td></td></tr><tr><td>224、基本计算器 (5+)</td><td>Medium</td><td></td></tr><tr><td>225、用队列实现栈 (4+)</td><td>Medium</td><td></td></tr><tr><td>227、基本计算器II (6-)</td><td>Medium</td><td></td></tr><tr><td>232、用栈实现队列 (4+)</td><td>Medium</td><td></td></tr><tr><td>394、字符串解码</td><td>Medium</td><td></td></tr><tr><td>636、函数的独占时间</td><td>Medium</td><td></td></tr><tr><td>682、棒球比赛</td><td>Medium</td><td></td></tr><tr><td>726、原子的数量 (6)</td><td>Medium</td><td></td></tr><tr><td>739、每日温度 经典</td><td>Medium</td><td></td></tr><tr><td>844、比较含退格的字符串</td><td>Medium</td><td></td></tr><tr><td>856、括号的分数</td><td>Medium</td><td></td></tr><tr><td>921、使括号有效的最少添加</td><td>Medium</td><td></td></tr><tr><td>946、验证栈序列 (4+)</td><td>Medium</td><td></td></tr><tr><td>1003、检查替换后的词是否有效</td><td>Medium</td><td></td></tr><tr><td>1047、删除字符串中的所有相邻重复项</td><td>Medium</td><td></td></tr><tr><td>1190、反转每对括号间的子串</td><td>Medium</td><td></td></tr><tr><td>1209、删除字符串中的所有相邻重复项</td><td>Medium</td><td></td></tr><tr><td>32、最长有效括号 (7+)</td><td>Hard</td><td></td></tr></tbody></table><h3 id="栈-单调栈"><a href="#栈-单调栈" class="headerlink" title="栈-单调栈"></a>栈-单调栈</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>255 验证前序遍历二叉搜索树序列</td><td>Medium</td><td></td></tr><tr><td>402 移掉K位数字</td><td>Medium</td><td></td></tr><tr><td>496 下一个更大元素</td><td>Medium</td><td></td></tr><tr><td>503 下一个更大元素II</td><td>Medium</td><td></td></tr><tr><td>84 柱状图最大矩形</td><td>Hard</td><td></td></tr><tr><td>85、最大矩形</td><td>Hard</td><td></td></tr><tr><td>316 去除重复字母</td><td>Hard</td><td></td></tr><tr><td>907 子数组的最小值之和</td><td>Hard</td><td></td></tr><tr><td>2289 使数组按非递减顺序排列</td><td>very Hard</td><td></td></tr></tbody></table><h2 id="堆（优先队列）"><a href="#堆（优先队列）" class="headerlink" title="堆（优先队列）"></a>堆（优先队列）</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>215 数组中的第K个最大元素 (4+)</td><td>Medium</td><td><a href="https://pass_co2.gitee.io/posts/9a31e8f5.html">leetcode-215. 数组中的第K个最大元素</a></td></tr><tr><td>239 滑动窗口最大值 (6)</td><td>Medium</td><td></td></tr><tr><td>253 会议室II (4+)</td><td>Medium</td><td></td></tr><tr><td>347 前K个高频元素 (5+)</td><td>Medium</td><td><a href="https://pass_co2.gitee.io/posts/a6b57153.html">leetcode-347. 前 K 个高频元素</a></td></tr><tr><td>358 K距离间隔重排字符串 (6+)</td><td>Medium</td><td></td></tr><tr><td>373 查找和最小的K对数字 (6)</td><td>Medium</td><td></td></tr><tr><td>502 IPO (6+)</td><td>Medium</td><td></td></tr><tr><td>295 数据流的中位数 (7)</td><td>Hard</td><td></td></tr><tr><td>407 接雨水II (8+)</td><td>Hard</td><td></td></tr><tr><td>480 滑动窗口中位数 (10-)</td><td>very Hard</td><td></td></tr></tbody></table><h2 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>208 实现前缀树 (3)</td><td>Easy</td><td></td></tr><tr><td>720 词典中最长的单词 (3+)</td><td>Easy</td><td></td></tr><tr><td>211 添加与搜索单词 (4)</td><td>Medium</td><td></td></tr><tr><td>212 单词搜索II (6-)</td><td>Medium</td><td></td></tr><tr><td>676 实现一个魔法字典 (5+)</td><td>Medium</td><td></td></tr><tr><td>1804 实现前缀树II (4)</td><td>Medium</td><td></td></tr><tr><td>472 连接词 (7-)</td><td>Hard</td><td></td></tr></tbody></table><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>1971.寻找图中是否存在路径</td><td>Easy</td><td></td></tr><tr><td>305 岛屿数量II</td><td>Medium</td><td></td></tr><tr><td>547.省份数量</td><td>Medium</td><td></td></tr><tr><td>1627 带阈值的图连通性</td><td>Medium    并查集+埃氏筛</td><td></td></tr><tr><td>1697 检查边长度限制的路径是否存在</td><td>Medium</td><td></td></tr><tr><td>2092 找出知晓秘密的所有专家</td><td>Medium</td><td></td></tr><tr><td>2204 无向图中到环的距离</td><td>Medium</td><td></td></tr><tr><td>1579 保证图可完全遍历</td><td>Hard</td><td></td></tr><tr><td>2076 处理含限制条件的好友请求</td><td>Hard</td><td></td></tr></tbody></table><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>202、快乐数</td><td>Easy</td><td><a href="https://pass_co2.gitee.io/posts/57a0e4d.html">leetcode-202.快乐数</a></td></tr><tr><td>204、计数质数</td><td>Easy</td><td></td></tr><tr><td>205、同构字符串</td><td>Easy</td><td></td></tr><tr><td>290、单词规律</td><td>Easy</td><td></td></tr><tr><td>387、字符串中的第一个唯一字符</td><td>Easy</td><td></td></tr><tr><td>594、最长和谐子序列</td><td>Easy</td><td></td></tr><tr><td>599、两个列表的最小索引总和</td><td>Easy</td><td></td></tr><tr><td>645、错误的集合</td><td>Easy</td><td></td></tr><tr><td>720、词典中最长的单词</td><td>Easy</td><td></td></tr><tr><td>884、两句话中的不常见单词</td><td>Easy</td><td></td></tr><tr><td>970、强整数 看的答案，豁然开朗</td><td>Easy</td><td></td></tr><tr><td>1207、独一无二的出现次数</td><td>Easy</td><td></td></tr><tr><td>3、无重复字符的最长子串</td><td>Medium</td><td></td></tr><tr><td>215、数组中的第K个最大元素 经典</td><td>Medium</td><td></td></tr><tr><td>347、前 K 个高频元素</td><td>Medium</td><td></td></tr><tr><td>380、常数时间插入、删除和获取随机元素</td><td>Medium</td><td></td></tr><tr><td>451、根据字符出现频率排序</td><td>Medium</td><td></td></tr><tr><td>648、单词替换</td><td>Medium</td><td></td></tr><tr><td>692、前K个高频单词</td><td>Medium</td><td></td></tr><tr><td>718、最长重复子数组 经典</td><td>Medium</td><td></td></tr></tbody></table><h1 id="Part3-算法题"><a href="#Part3-算法题" class="headerlink" title="Part3-算法题"></a>Part3-算法题</h1><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>286 墙与门</td><td>Easy</td><td></td></tr><tr><td>127 单词接龙</td><td>Medium</td><td></td></tr><tr><td>317 离建筑物的最近距离</td><td>Medium</td><td></td></tr><tr><td>417 太平洋大西洋</td><td>Medium</td><td></td></tr><tr><td>773 滑动谜题</td><td>Medium</td><td></td></tr><tr><td>815 公交路线</td><td>Medium</td><td></td></tr><tr><td>909 蛇梯棋</td><td>Medium</td><td></td></tr><tr><td>2146 价格范围内最高排名的 K 样物品</td><td>Medium</td><td></td></tr><tr><td>2290 到达角落需要移除障碍物的最少数量</td><td>Medium</td><td></td></tr><tr><td>126 单词接龙II</td><td>Hard</td><td></td></tr></tbody></table><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>690 员工的重要性</td><td>Easy</td><td></td></tr><tr><td>130 被围绕的区域</td><td>Medium</td><td></td></tr><tr><td>200 岛屿数量</td><td>Medium</td><td></td></tr><tr><td>339 嵌套列表权重和</td><td>Medium</td><td></td></tr><tr><td>341 扁平嵌套列表迭代器</td><td>Medium</td><td></td></tr><tr><td>529 扫雷游戏</td><td>Medium</td><td></td></tr></tbody></table><h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2><h3 id="DP-递推公式"><a href="#DP-递推公式" class="headerlink" title="DP-递推公式"></a>DP-递推公式</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>70 爬楼梯 (3-)</td><td>Easy</td><td></td></tr><tr><td>118 杨辉三角 (2)</td><td>Easy</td><td></td></tr><tr><td>119 杨辉三角II (2)</td><td>Easy</td><td></td></tr></tbody></table><h3 id="DP-打家劫舍"><a href="#DP-打家劫舍" class="headerlink" title="DP-打家劫舍"></a>DP-打家劫舍</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>91 解码方法 (3)</td><td>Easy</td><td></td></tr><tr><td>198 打家劫舍 (3-)</td><td>Easy</td><td></td></tr><tr><td>213 打家劫舍II (3+)</td><td>Easy</td><td></td></tr><tr><td>639 解码方法II (5)</td><td>Medium</td><td></td></tr><tr><td>740 删除并获得点数 (5-)</td><td>Medium</td><td></td></tr></tbody></table><h3 id="DP-子数组问题"><a href="#DP-子数组问题" class="headerlink" title="DP-子数组问题"></a>DP-子数组问题</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>53 最大子序和 (4-)</td><td>Medium</td><td></td></tr><tr><td>152 乘积最大子数组 (5+)</td><td>Medium</td><td></td></tr><tr><td>718 最长公共子数组 (4)</td><td>Medium</td><td></td></tr></tbody></table><h3 id="DP-股票问题"><a href="#DP-股票问题" class="headerlink" title="DP-股票问题"></a>DP-股票问题</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>121 买卖股票的最佳时机 (3+)</td><td>Easy</td><td></td></tr><tr><td>122 买卖股票的最佳时机II (3) 可贪心解</td><td>Easy</td><td></td></tr><tr><td>309 买卖股票的最佳时机冷冻 (5)</td><td>Medium</td><td></td></tr><tr><td>714 买卖股票的最佳时机手续费 (4) 可贪心解</td><td>Medium</td><td></td></tr><tr><td>2054 两个最好的不重叠活动 (6+)</td><td>Medium</td><td></td></tr><tr><td>123 买卖股票的最佳时机III (7-)</td><td>Hard</td><td></td></tr><tr><td>188 买卖股票的最佳时机IV (7)</td><td>Hard</td><td></td></tr><tr><td>1751 最多可以参加的会议数目II (7-)</td><td>Hard</td><td></td></tr><tr><td>1235 规划兼职工作 (7-)</td><td>Hard</td><td></td></tr></tbody></table><h3 id="DP-一维数组（平方级时间复杂度）"><a href="#DP-一维数组（平方级时间复杂度）" class="headerlink" title="DP-一维数组（平方级时间复杂度）"></a>DP-一维数组（平方级时间复杂度）</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>279 完全平方数</td><td>Medium    可用数学方法解</td><td></td></tr><tr><td>300 最长递增子序列</td><td>Medium    可用贪心+二分</td><td></td></tr><tr><td>343 整数拆分</td><td>Medium    可用数学方法解</td><td></td></tr><tr><td>368 最大整除子集</td><td>Medium</td><td></td></tr><tr><td>650 只有两个键的键盘</td><td>Medium    可用数学方法解</td><td></td></tr></tbody></table><h3 id="DP-二维路径和问题"><a href="#DP-二维路径和问题" class="headerlink" title="DP-二维路径和问题"></a>DP-二维路径和问题</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>62 不同路径</td><td>Easy</td><td></td></tr><tr><td>63 不同路径II</td><td>Easy</td><td></td></tr><tr><td>64 最小路径和</td><td>Easy</td><td></td></tr><tr><td>120 三角形最小路径和</td><td>Easy</td><td></td></tr><tr><td>174 地下城游戏</td><td>Medium</td><td></td></tr><tr><td>221 最大正方形</td><td>Medium</td><td></td></tr><tr><td>329 矩阵中的最长递增路径</td><td>Medium    记忆化搜索实现</td><td></td></tr></tbody></table><h3 id="DP-字符串"><a href="#DP-字符串" class="headerlink" title="DP-字符串"></a>DP-字符串</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>72 编辑距离 (6)</td><td>Medium</td><td></td></tr><tr><td>115 不同的子序列 (6+)</td><td>Medium</td><td></td></tr><tr><td>1143 最长公共子序列 (6)</td><td>Medium</td><td></td></tr><tr><td>10 正则表达式匹配 (8+)</td><td>Hard</td><td></td></tr><tr><td>44 通配符匹配 (7)</td><td>Hard</td><td></td></tr><tr><td>97 交错字符串 (7-)</td><td>Hard</td><td></td></tr><tr><td>1987 不同的好子序列数目 (9-)</td><td>Hard</td><td></td></tr></tbody></table><h3 id="DP-回文字符串"><a href="#DP-回文字符串" class="headerlink" title="DP-回文字符串"></a>DP-回文字符串</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>5 最长回文子串</td><td>Medium</td><td></td></tr><tr><td>131 分割回文串</td><td>Medium    DP预处理+回溯</td><td></td></tr><tr><td>132 分割回文串II</td><td>Medium</td><td></td></tr><tr><td>516 最长回文子序列</td><td>Medium</td><td></td></tr></tbody></table><h3 id="DP-背包问题"><a href="#DP-背包问题" class="headerlink" title="DP-背包问题"></a>DP-背包问题</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>322 零钱兑换</td><td>Medium</td><td></td></tr><tr><td>377 组合总和IV</td><td>Medium</td><td></td></tr><tr><td>416 分割等和子集</td><td>Medium</td><td></td></tr><tr><td>474 一和零</td><td>Medium</td><td></td></tr><tr><td>518 零钱兑换II</td><td>Medium</td><td></td></tr><tr><td>2218 从栈中取出 K 个硬币的最大面值和</td><td>Hard    分组背包</td><td></td></tr></tbody></table><h3 id="DP-粉刷房子"><a href="#DP-粉刷房子" class="headerlink" title="DP-粉刷房子"></a>DP-粉刷房子</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>256 粉刷房子 (3)</td><td>Easy</td><td></td></tr><tr><td>276 栅栏涂色 (3)</td><td>Easy</td><td></td></tr><tr><td>265 粉刷房子II (5)</td><td>Medium</td><td></td></tr><tr><td>552 学生出勤记录II (5+)</td><td>Medium</td><td></td></tr></tbody></table><h3 id="DP-状态压缩"><a href="#DP-状态压缩" class="headerlink" title="DP-状态压缩"></a>DP-状态压缩</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>464 我能赢吗</td><td>Hard    记忆化搜索实现，博弈问题</td><td></td></tr><tr><td>1349 参加考试的最大学生数</td><td>Hard</td><td></td></tr><tr><td>2172 数组的最大与和</td><td>Hard    三进制状态压缩</td><td></td></tr><tr><td>2247 K次旅行的最大花费</td><td>Hard    DP与图论结合</td><td></td></tr></tbody></table><h3 id="DP-区间"><a href="#DP-区间" class="headerlink" title="DP-区间"></a>DP-区间</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>375 猜数字大小II</td><td>Medium</td><td></td></tr><tr><td>486 预测赢家</td><td>Medium</td><td></td></tr></tbody></table><h3 id="DP-其他"><a href="#DP-其他" class="headerlink" title="DP-其他"></a>DP-其他</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>600 不含连续1的非负整数</td><td>Medium</td><td></td></tr><tr><td>264 丑数II</td><td>Hard</td><td></td></tr><tr><td>313 超级丑数</td><td>Hard</td><td></td></tr><tr><td>808 分汤</td><td>Hard    DP算概率</td><td></td></tr><tr><td>837 新21点</td><td>Hard    DP算概率</td><td></td></tr><tr><td>1477 找两个和为目标值且不重叠的子数组</td><td>Hard    DP+滑动窗口/前缀和</td><td></td></tr><tr><td>546 移除盒子</td><td>very Hard    3维DP数组，难度极高</td><td></td></tr><tr><td>1397 找到所有好字符串</td><td>very Hard    数位DP+KMP，全网顶级hard之一</td><td></td></tr><tr><td>2060 同源字符串检测</td><td>very Hard    3~4维DP数组，难度极高</td><td></td></tr></tbody></table><h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>455 分发饼干</td><td>Easy</td><td></td></tr><tr><td>605 种花问题</td><td>Easy</td><td></td></tr><tr><td>781 森林中的兔子</td><td>Easy</td><td></td></tr><tr><td>944、删列造序</td><td>Easy</td><td></td></tr><tr><td>1029、两地调度</td><td>Easy</td><td></td></tr><tr><td>1046、最后一块石头的重量</td><td>Easy</td><td></td></tr><tr><td>1049、最后一块石头的重量 II</td><td>Easy</td><td></td></tr><tr><td>1217、玩筹码</td><td>Easy</td><td></td></tr><tr><td>1221、分割平衡字符串</td><td>Easy</td><td></td></tr><tr><td>1877 数组中最大数对和的最小值</td><td>Easy</td><td></td></tr><tr><td>1953 你可以工作的最大周数</td><td>Easy</td><td></td></tr><tr><td>11 最多水的容器</td><td>Medium</td><td></td></tr><tr><td>45 跳跃游戏II</td><td>Medium</td><td></td></tr><tr><td>135 分发糖果</td><td>Medium</td><td></td></tr><tr><td>334 递增的三元子序列</td><td>Medium</td><td></td></tr><tr><td>406 根据身高重建队列</td><td>Medium</td><td></td></tr><tr><td>435 无重叠区间</td><td>Medium</td><td></td></tr><tr><td>452 用最少数量的箭引爆气球</td><td>Medium</td><td></td></tr><tr><td>678 有效括号字符串</td><td>Medium</td><td></td></tr><tr><td>1147 段式回文</td><td>Medium</td><td></td></tr><tr><td>2268 最少按键次数</td><td>Medium</td><td></td></tr><tr><td>134 加油站</td><td>Hard</td><td></td></tr><tr><td>330 按要求补齐数组</td><td>Hard</td><td></td></tr><tr><td>517 超级洗衣机</td><td>Hard</td><td></td></tr><tr><td>659 分割数组为连续子序列</td><td>Hard</td><td></td></tr><tr><td>1686 石子游戏VI</td><td>Hard</td><td></td></tr><tr><td>2350 不可能得到的最短骰子序列</td><td>Hard</td><td></td></tr><tr><td>2071 你可以安排的最多任务数目</td><td>very Hard    贪心+二分+优先/单调队列综合</td><td></td></tr></tbody></table><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><h3 id="回溯-初识回溯"><a href="#回溯-初识回溯" class="headerlink" title="回溯-初识回溯"></a>回溯-初识回溯</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>17 电话号码的字母组合</td><td>Easy</td><td></td></tr></tbody></table><h3 id="回溯-排列组合子集问题"><a href="#回溯-排列组合子集问题" class="headerlink" title="回溯-排列组合子集问题"></a>回溯-排列组合子集问题</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>46 全排列 (3)</td><td>Easy</td><td></td></tr><tr><td>78 子集 (3+)</td><td>Easy</td><td></td></tr><tr><td>39 组合总和 (4-)</td><td>Medium</td><td></td></tr><tr><td>40 组合总和II (5)</td><td>Medium</td><td></td></tr><tr><td>47 全排列II (4)</td><td>Medium</td><td></td></tr><tr><td>77 组合 (4-)</td><td>Medium</td><td></td></tr><tr><td>78、子集</td><td>Medium</td><td></td></tr><tr><td>90 子集II (4+)</td><td>Medium</td><td></td></tr></tbody></table><h3 id="回溯-其他高级问题"><a href="#回溯-其他高级问题" class="headerlink" title="回溯-其他高级问题"></a>回溯-其他高级问题</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>526 优美的排列</td><td>Easy</td><td></td></tr><tr><td>37 解数独</td><td>Medium</td><td></td></tr><tr><td>51 N皇后</td><td>Medium</td><td></td></tr><tr><td>79 单词搜索</td><td>Medium</td><td></td></tr><tr><td>93 复原IP地址</td><td>Medium</td><td></td></tr><tr><td>254 因子的组合</td><td>Medium</td><td></td></tr><tr><td>291 单词规律II</td><td>Medium</td><td></td></tr><tr><td>294 翻转游戏II</td><td>Medium</td><td></td></tr><tr><td>301 删除无效的括号</td><td>Medium</td><td></td></tr><tr><td>679 24点游戏</td><td>Medium</td><td></td></tr><tr><td>996 正方形数组的数目</td><td>Medium</td><td></td></tr><tr><td>1240 铺瓷砖</td><td>Hard</td><td></td></tr></tbody></table><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="二分-基本型"><a href="#二分-基本型" class="headerlink" title="二分-基本型"></a>二分-基本型</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>33 搜索旋转排序数组</td><td>Easy</td><td></td></tr><tr><td>34 在排序数组中查找元素的第一个和最后一个位置</td><td>Easy</td><td></td></tr><tr><td>35 搜索插入位置</td><td>Easy</td><td></td></tr><tr><td>81 搜索旋转排序数组II</td><td>Easy</td><td></td></tr><tr><td>167、两数之和 II - 输入有序数组</td><td>Easy</td><td></td></tr><tr><td>278、第一个错误的版本</td><td>Easy</td><td></td></tr><tr><td>367、有效的完全平方数</td><td>Easy</td><td></td></tr><tr><td>374、猜数字大小</td><td>Easy</td><td></td></tr><tr><td>441、排列硬币</td><td>Easy</td><td></td></tr><tr><td>475、供暖器,很经典</td><td>Easy</td><td></td></tr><tr><td>704 二分查找</td><td>Easy</td><td></td></tr><tr><td>744、寻找比目标字母大的最小字母</td><td>Easy</td><td></td></tr><tr><td>1095、山脉数组中查找目标值</td><td>Easy</td><td></td></tr></tbody></table><h3 id="二分-进阶型"><a href="#二分-进阶型" class="headerlink" title="二分-进阶型"></a>二分-进阶型</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>29、两数相除</td><td>Medium</td><td></td></tr><tr><td>153、寻找旋转排序数组中的最小值</td><td>Medium</td><td></td></tr><tr><td>162 寻找峰值</td><td>Medium</td><td></td></tr><tr><td>275 H指数II</td><td>Medium</td><td></td></tr><tr><td>436、寻找右区间,很好的题</td><td>Medium</td><td></td></tr><tr><td>454、四数相加 II</td><td>Medium</td><td></td></tr><tr><td>540 有序数组中的单一元素</td><td>Medium</td><td></td></tr><tr><td>792、匹配子序列的单词数</td><td>Medium</td><td></td></tr><tr><td>1818 绝对差值和</td><td>Medium</td><td></td></tr><tr><td>4 寻找两个正序数组中位数</td><td>Hard</td><td></td></tr><tr><td>302 包含全部黑色像素</td><td>Hard</td><td></td></tr><tr><td>1901 找出顶峰元素II</td><td>Hard</td><td></td></tr><tr><td>1964 最长递增子序列进阶</td><td>Hard</td><td></td></tr></tbody></table><h3 id="二分-转化判定问题（俗称二分猜答案）"><a href="#二分-转化判定问题（俗称二分猜答案）" class="headerlink" title="二分-转化判定问题（俗称二分猜答案）"></a>二分-转化判定问题（俗称二分猜答案）</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>69 Sqrt</td><td>Easy</td><td></td></tr><tr><td>410 分割数组的最大值</td><td>Medium</td><td></td></tr><tr><td>875 爱吃香蕉的珂珂</td><td>Medium</td><td></td></tr><tr><td>1970 穿过矩阵的最后一天</td><td>Medium</td><td></td></tr><tr><td>287 寻找重复数</td><td>Hard</td><td></td></tr><tr><td>378 有序矩阵的第K小元素</td><td>Hard</td><td></td></tr></tbody></table><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><h3 id="前缀和-普通型"><a href="#前缀和-普通型" class="headerlink" title="前缀和-普通型"></a>前缀和-普通型</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>303 区域检索-数组不可变</td><td>Easy</td><td></td></tr><tr><td>1480 一维数组的动态和</td><td>Easy</td><td></td></tr><tr><td>238 除自身以外数组的乘积</td><td>Medium</td><td></td></tr><tr><td>523 连续的子数组和</td><td>Medium</td><td></td></tr><tr><td>525 连续数组</td><td>Medium</td><td></td></tr><tr><td>528 按权重随机选择</td><td>Medium</td><td></td></tr><tr><td>560 和为K的子数组</td><td>Medium</td><td></td></tr><tr><td>2245 转角路径的乘积中最多能有几个尾随零</td><td>Hard     二维矩阵中的一维前缀和+数学</td><td></td></tr><tr><td>2281 巫师的总力量和</td><td>Hard    单调栈+前缀和的前缀和</td><td></td></tr></tbody></table><h3 id="前缀和-二维"><a href="#前缀和-二维" class="headerlink" title="前缀和-二维"></a>前缀和-二维</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>304 区域检索-矩阵不可变</td><td>Medium</td><td></td></tr><tr><td>1314 矩阵区域和</td><td>Medium</td><td></td></tr></tbody></table><h3 id="前缀和-构造差分数组"><a href="#前缀和-构造差分数组" class="headerlink" title="前缀和-构造差分数组"></a>前缀和-构造差分数组</h3><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>370 区间加法</td><td>Medium</td><td></td></tr><tr><td>1094 拼车</td><td>Medium</td><td></td></tr><tr><td>1109 航班预定统计</td><td>Medium</td><td></td></tr><tr><td>798 得分最高的最小轮调</td><td>Hard</td><td></td></tr><tr><td>2132 用邮票贴满网格图</td><td>Hard    二维差分数组+两次二维前缀和</td><td></td></tr></tbody></table><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>187 重复的DNA序列 (3)</td><td>Easy</td><td></td></tr><tr><td>209 长度最小的子数组 (3+)</td><td>Easy</td><td></td></tr><tr><td>438 找到字符串中所有字母异位词 (3+)</td><td>Easy</td><td></td></tr><tr><td>3 无重复字符的最长子串 (4-)</td><td>Medium</td><td></td></tr><tr><td>30 串联所有单词的子串 (6)</td><td>Medium</td><td></td></tr><tr><td>340 最多包含K个不同字符的最长子串 (5-)</td><td>Medium</td><td></td></tr><tr><td>424 替换后的最长重复字符 (4)</td><td>Medium</td><td></td></tr><tr><td>713 乘积小于K的子数组 (4)</td><td>Medium</td><td></td></tr><tr><td>76 最小覆盖子串 (7-)</td><td>Hard</td><td></td></tr></tbody></table><h2 id="分治"><a href="#分治" class="headerlink" title="分治"></a>分治</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>1274 矩形内船只的数目</td><td>Medium</td><td></td></tr><tr><td>932 漂亮数组</td><td>Hard</td><td></td></tr><tr><td>1763 最长的美好子字符串</td><td>Hard</td><td></td></tr></tbody></table><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>136 只出现一次的数字</td><td>Easy</td><td></td></tr><tr><td>371 两整数之和</td><td>Easy</td><td></td></tr><tr><td>477 汉明距离总和</td><td>Easy</td><td></td></tr><tr><td>1310 子数组异或查询</td><td>Easy</td><td></td></tr><tr><td>201 数字范围按位与</td><td>Medium</td><td></td></tr><tr><td>260 只出现一次的数字III</td><td>Medium</td><td></td></tr><tr><td>318 最大单词长度乘积</td><td>Medium</td><td></td></tr><tr><td>982 按位与为零的三元组</td><td>Medium</td><td></td></tr><tr><td>1284 转化为全零矩阵的最少反转次数</td><td>Medium</td><td></td></tr><tr><td>1734 解码异或后的排列</td><td>Medium</td><td></td></tr><tr><td>2313 操作后的最大异或和</td><td>Medium</td><td></td></tr><tr><td>137 只出现一次的数字II</td><td>Hard</td><td></td></tr><tr><td>421 数组中两个数的最大异或</td><td>Hard</td><td></td></tr><tr><td>898 子数组按位或操作</td><td>Hard</td><td></td></tr><tr><td>2354 优质数对的数目</td><td>Hard</td><td></td></tr></tbody></table><h1 id="Part4-数学题"><a href="#Part4-数学题" class="headerlink" title="Part4-数学题"></a>Part4-数学题</h1><h2 id="数学-模拟竖式"><a href="#数学-模拟竖式" class="headerlink" title="数学-模拟竖式"></a>数学-模拟竖式</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>66 加一</td><td>Easy</td><td></td></tr><tr><td>166 分数到小数</td><td>Easy</td><td></td></tr><tr><td>415 字符串相加</td><td>Easy</td><td></td></tr><tr><td>43 字符串相乘</td><td>Medium</td><td></td></tr></tbody></table><h2 id="数学-进制转换"><a href="#数学-进制转换" class="headerlink" title="数学-进制转换"></a>数学-进制转换</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>171 Excel表序号</td><td>Easy</td><td></td></tr><tr><td>405 转换为十六进制数</td><td>Easy</td><td></td></tr><tr><td>168 Excel表名称</td><td>Medium</td><td></td></tr></tbody></table><h2 id="数学-几何"><a href="#数学-几何" class="headerlink" title="数学-几何"></a>数学-几何</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>149 直线最多的点</td><td>Medium</td><td></td></tr><tr><td>223 矩形面积</td><td>Medium</td><td></td></tr><tr><td>296 最佳碰头地点</td><td>Medium</td><td></td></tr><tr><td>356 直线镜像</td><td>Medium</td><td></td></tr><tr><td>462 最少移动次数使数组元素相等</td><td>Medium</td><td></td></tr><tr><td>593 有效的正方形</td><td>Medium</td><td></td></tr><tr><td>335 路径交叉</td><td>Hard</td><td></td></tr></tbody></table><h2 id="数学-其他"><a href="#数学-其他" class="headerlink" title="数学-其他"></a>数学-其他</h2><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>268 丢失的数字 (2+)</td><td>Easy</td><td></td></tr><tr><td>292 Nim游戏 (2)</td><td>Easy</td><td></td></tr><tr><td>357 计算各个位数不同的数字个数 (3+)</td><td>Easy</td><td></td></tr><tr><td>60 排列序列</td><td>Medium</td><td></td></tr><tr><td>172 阶乘后的零</td><td>Medium</td><td></td></tr><tr><td>204 计数质数</td><td>Medium</td><td></td></tr><tr><td>233 数字1的个数</td><td>Medium</td><td></td></tr><tr><td>258 各位相加</td><td>Medium</td><td></td></tr><tr><td>319 灯泡开关</td><td>Medium</td><td></td></tr><tr><td>360 有序转化数组</td><td>Medium</td><td></td></tr><tr><td>365 水壶问题</td><td>Medium</td><td></td></tr><tr><td>1518 换酒问题</td><td>Medium</td><td></td></tr><tr><td>458 可怜的小猪</td><td>Hard</td><td></td></tr><tr><td>483 最小好进制</td><td>Hard</td><td></td></tr><tr><td>1735 生成乘积数组的方案数</td><td>Hard</td><td></td></tr><tr><td>1823 找出游戏的获胜者</td><td>Hard    经典约瑟夫环问题</td><td></td></tr></tbody></table><h1 id="Part5-设计题"><a href="#Part5-设计题" class="headerlink" title="Part5-设计题"></a>Part5-设计题</h1><table><thead><tr><th>题目</th><th>难度</th><th>Go</th></tr></thead><tbody><tr><td>1570 两个稀疏向量的点积</td><td>Easy</td><td></td></tr><tr><td>271 字符串的编解码</td><td>Medium</td><td></td></tr><tr><td>284 窥探迭代器</td><td>Medium</td><td></td></tr><tr><td>348 井字棋</td><td>Medium</td><td></td></tr><tr><td>353 贪吃蛇</td><td>Medium</td><td></td></tr><tr><td>355 设计推特</td><td>Medium</td><td></td></tr><tr><td>380 O(1)插入删除随机不重复</td><td>Medium</td><td></td></tr><tr><td>381 O(1)插入删除随机有重复</td><td>Medium</td><td></td></tr><tr><td>1500 设计文件分享系统</td><td>Medium</td><td></td></tr><tr><td>2296 设计一个文本编辑器</td><td>Medium</td><td></td></tr><tr><td>146 LRU缓存</td><td>Hard</td><td></td></tr><tr><td>352 将数据流变为多个不相交区间</td><td>Hard</td><td></td></tr><tr><td>460 LFU缓存</td><td>Hard</td><td></td></tr><tr><td>1206 设计跳表</td><td>Hard</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++黑马程序员---五、函数高级</title>
      <link href="posts/8f5bca0f.html"/>
      <url>posts/8f5bca0f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="5-1-函数默认参数"><a href="#5-1-函数默认参数" class="headerlink" title="5.1  函数默认参数"></a>5.1  函数默认参数</h2><p><strong>语法：</strong>返回类型 函数名（参数=默认值）{}<br><strong>注意事项：</strong><br>        如果某个位置已经有了默认参数，那么从这个位置往后，从左到右都必须有默认值。<br>如果函数的声明有默认参数，函数实现就不能有默认参数。（编译器不知道用哪个参数）</p><h2 id="5-2-函数占位参数"><a href="#5-2-函数占位参数" class="headerlink" title="5.2  函数占位参数"></a>5.2  函数占位参数</h2><p><strong>语法：</strong>返回类型 函数名（数据类型）{}  //（括号里只写数据类型，传递的参数类型必须和所写的一样）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//占位参数可以有默认参数</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"func"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3-函数重载"><a href="#5-3-函数重载" class="headerlink" title="5.3  函数重载"></a>5.3  函数重载</h2><p><strong>作用：</strong>函数名可以相同，提高复用性<br><strong>满足条件</strong>：<br>        ①同一个作用域。（ex：都在全局作用域下）<br>        ②函数名称相同。<br>        ③参数类型不同/个数不同/顺序不同。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//在全局作用域</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用test( )"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用test(int a)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用test(double a)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用test(int a, int b)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用test(int a, double b)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用test(double a, int b)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/3YW1D9iC.png"><br><strong>注意：</strong>函数的返回值不能作为函数重载的条件（返回值类型不同不行,有二义性）<br><strong>引用作为函数重载的条件</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//引用作为重载条件</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用test(int &amp;a)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用test(const int&amp; b)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/L5ndMErg.png"><br><strong>函数重载碰到默认参数</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//函数重载碰到默认参数</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用test(int &amp;a)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"调用test(const int&amp; b)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//err,出现二义</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++黑马程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++黑马程序员---三、内存四区</title>
      <link href="posts/514bb67d.html"/>
      <url>posts/514bb67d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="3-1-内存四区"><a href="#3-1-内存四区" class="headerlink" title="3.1  内存四区"></a>3.1  内存四区</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域：</strong><br>        ·代码区:存放函数体的二进制代码，由操作系统进行管理的<br>        ·全局区:存放全局变量和静态变量以及常量<br>·        栈区:由编译器自动分配释放,存放函数的参数值,局部变量等<br>·        堆区:由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收<br><strong>内存四区意义:</strong><br>        不同区域存放的数据，赋予不同的生命周期,给我们更大的灵活编程<br><strong>程序运行前：</strong><br>        代码区：存放函数体的的二进制代码，操作系统管理。<br>        特点：<br>            ①共享 ：对于频繁被执行的程序，只需要在内存中有一份代码即可。<br>            ②只读：目的是防止程序意外地修改了它的指令。</p><p>全局区：存放全局变量、静态变量（stati关键字）和常量（字符串常量和const修饰的全局变量（全局常量））。<br>不在全局区中：局部变量、const修饰的局部变量（局部常量）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//全局变量</span><span class="token keyword">int</span> g_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_g_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> l_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//静态变量</span><span class="token keyword">static</span> <span class="token keyword">int</span> s_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//常量：字符串常量/const修饰的变量（全局/局部变量）</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> a <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_l_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部变量l_a的十进制地址为："</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>l_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局变量g_a的十进制地址为："</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"静态变量s_a的十进制地址为："</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"字符串常量a的十进制地址为："</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"const修饰的全局变量c_g_a的十进制地址为："</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_g_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"const修饰的局部变量c_l_a的十进制地址为："</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_l_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/0CEQp2SD.png"><br><strong>程序运行后：</strong><br>        栈区：存放函数的参数值、局部变量。由编译器自动分配和释放。<br>        注意事项：不要返回局部变量地址<br>        形参数据也会放在栈区</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">funcation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//存放在栈区，栈区的数据在函数执行完后自动释放</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">funcation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">"局部变量a的值为："</span><span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">//第一次正常打印，因为编译器做了保留</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部变量a的值为："</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/jox9sdF2.png"><br>堆区：由程序员分配（new）和释放（delete），若程序员不释放，程序结束时由操作系统回收。 </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">funcation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//new关键字，可以将数据开辟到堆区上</span><span class="token comment">//指针本质上也是局部变量，存放在栈区上，但是保存的数据在堆区</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回的是地址，不是数据</span><span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">funcation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在c++中主要利用new在堆区开辟内存</p><h2 id="3-2-new操作符"><a href="#3-2-new操作符" class="headerlink" title="3.2  new操作符"></a>3.2  new操作符</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//new的基本用法</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在堆区创建整型变量，返回该变量的地址</span><span class="token keyword">delete</span> p<span class="token punctuation">;</span><span class="token comment">//释放</span><span class="token keyword">int</span><span class="token operator">*</span> parr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//在堆区创建一个元素为10的整型数组，返回数组首元素的地址</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span><span class="token comment">//释放一个数组 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在堆区利用new开辟数组        </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放堆区数组</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++黑马程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++黑马程序员---四、引用</title>
      <link href="posts/b0d196a3.html"/>
      <url>posts/b0d196a3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="4-1-引用的基本使用"><a href="#4-1-引用的基本使用" class="headerlink" title="4.1  引用的基本使用"></a>4.1  引用的基本使用</h2><p><strong>引用：</strong>给变量起个别名。<br><strong>语法：</strong>数据类型 &amp; 别名=原名</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token operator">=</span>a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-2-引用的注意事项"><a href="#4-2-引用的注意事项" class="headerlink" title="4.2  引用的注意事项"></a>4.2  引用的注意事项</h2><p>1.引用必须要初始化<br>2.引用一旦初始化后就不可以更改</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//int&amp; b = c; //错了！！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/VTwTkg7x.png"></p><h2 id="4-3-引用做函数参数"><a href="#4-3-引用做函数参数" class="headerlink" title="4.3  引用做函数参数"></a>4.3  引用做函数参数</h2><p>作用：函数传参时，可以利用引用的技术让形参修饰实参。<br>优点：可以简化指针修改实参</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//地址传递</span><span class="token keyword">void</span> <span class="token function">swap01</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span><span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//引用传递</span><span class="token keyword">void</span> <span class="token function">swap02</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-引用做函数的返回值"><a href="#4-4-引用做函数的返回值" class="headerlink" title="4.4  引用做函数的返回值"></a>4.4  引用做函数的返回值</h2><p>注意：不要返回局部变量的引用，函数的调用可以作为左值。（局部变量存放在栈区，函数执行完后自动释放局部变量，可以加上static是数据存放在全局区，就可以返回了）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//eg.</span><span class="token comment">//①不要返回局部变量的引用</span><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span><span class="token operator">&amp;</span> ret <span class="token operator">=</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ret="</span> <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ret="</span> <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">//②如果函数的返回值为引用，函数的调用可以作为左值</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ret="</span> <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ret="</span> <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/q1CWVwZH.png"></p><h2 id="4-5-引用的本质"><a href="#4-5-引用的本质" class="headerlink" title="4.5  引用的本质"></a>4.5  引用的本质</h2><p>本质：引用的本质在c++内部实现是一个指针常量（指针的指向不可以修改，指针指向的值可以修改），即 引用的本质就是一个指针常量，引用一旦初始化后就不可发生改变</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//自动转换为 int* const ref = &amp;a;指针常量是指针指向不可改，也说明为什么引用不可改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-6-常量引用"><a href="#4-6-常量引用" class="headerlink" title="4.6  常量引用"></a>4.6  常量引用</h2><p>常量引用主要用来修饰形参，防止误操作。（防止修改了形参引起了实参的改变，加上const之后，修改操作会报错，不能修改）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">&amp;</span>ret<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//错了！，引用本身需要一个合法的内存空间。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*相当于编译器先创建一个临时变量:int temp=10;然后进行起别名:int&amp; ret=temp;*/</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> ret <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：用常量引用之后不可以更改数据。 </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//eg.</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> ret <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>ret <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//err</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ret="</span> <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/77muT2zz.png"></p>]]></content>
      
      
      <categories>
          
          <category> C++黑马程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++黑马程序员---七、文件操作</title>
      <link href="posts/7d980d74.html"/>
      <url>posts/7d980d74.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>C++中对文件操作需要包含头文件<fstream><br><strong>文件类型分为两种：</strong><br>文本文件：文件以文本的ASCII码形式存储在计算机中。<br>二进制文件：文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂他们。<br><strong>操作文件三大类：</strong><br>ofstream：写操作<br>ifstream：读操作<br>fstream：读写操作</fstream></p><h2 id="7-1-文本文件"><a href="#7-1-文本文件" class="headerlink" title="7.1  文本文件"></a>7.1  文本文件</h2><h3 id="7-1-1-写文件"><a href="#7-1-1-写文件" class="headerlink" title="7.1.1  写文件"></a>7.1.1  写文件</h3><p><strong>写文件的步骤</strong>：<br>包含头文件   #include<fstream><br>创建流对象   ofstream ofs;<br>打开文件       ofs.open(“文件路径”,打开方式);<br>写数据           ofs&lt;&lt;”写入的数据”;<br>关闭文件       ofs.close();</fstream></p><table><thead><tr><th><strong>打开方式</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p>文件打开方式可以配合使用，利用 | 操作符。 </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ofstream ofs<span class="token punctuation">;</span>ofs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>ofs <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名：张三"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>ofs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-2-读文件"><a href="#7-1-2-读文件" class="headerlink" title="7.1.2  读文件"></a>7.1.2  读文件</h3><p><strong>读文件的步骤</strong>：<br>包含头文件   #include<fstream><br>创建流对象   ifstream ifs;<br>打开文件       ifs.open(“文件路径”,打开方式);<br>读数据          四种读取方式<br>关闭文件       ifs.close();</fstream></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ifstream ifs<span class="token punctuation">;</span>ifs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"打开失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//读数据,第一种</span><span class="token keyword">char</span> buf1<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>ifs <span class="token operator">&gt;&gt;</span> buf1<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> buf1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//读数据,第二种</span><span class="token keyword">char</span> buf2<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>ifs<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>buf2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> buf2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//读数据,第三种</span>string buf3<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ifs<span class="token punctuation">,</span> buf3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> buf3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//读数据,第四种</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> ifs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span>ifs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-2-二进制文件"><a href="#7-2-二进制文件" class="headerlink" title="7.2  二进制文件"></a>7.2  二进制文件</h2><p>打开方式要指定为 ios::binary</p><h3 id="7-2-1-写文件"><a href="#7-2-1-写文件" class="headerlink" title="7.2.1  写文件"></a>7.2.1  写文件</h3><p>二进制方式写文件主要利用流对象调用成员函数write<br><strong>函数原型</strong> ：ostream&amp; write(const char * buffer,int len);<br><strong>参数解释</strong>：字符指针buffer指向内存中一段存储空间。len是读写的字节数<br>两种打开文件方式均可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">char</span> m_Name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//1、包含头文件</span><span class="token comment">//2、创建输出流对象</span>ofstream <span class="token function">ofs</span><span class="token punctuation">(</span><span class="token string">"person.txt"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>out <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3、打开文件</span><span class="token comment">//ofs.open("person.txt", ios::out | ios::binary);</span>Person p <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"张三"</span>  <span class="token punctuation">,</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//4、写文件</span>ofs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5、关闭文件</span>ofs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-2-读文件"><a href="#7-2-2-读文件" class="headerlink" title="7.2.2  读文件"></a>7.2.2  读文件</h3><p>二进制方式读文件主要利用流对象调用成员函数read<br><strong>函数原型</strong>：istream&amp; read(char *buffer,int len);<br><strong>参数解释</strong>：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">char</span> m_Name<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m_Age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//二进制文件，读文件</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//1.包含头文件</span><span class="token comment">//2.创建流对象</span><span class="token comment">//3.打开文件并判断文件是否打开成功</span>ifstream <span class="token function">ifs</span><span class="token punctuation">(</span><span class="token string">"person.txt"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>in <span class="token operator">|</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ifs<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"文件打开失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//4.读文件(读到的是正常的不是乱码)</span>Person p<span class="token punctuation">;</span>ifs<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_Name <span class="token operator">&lt;&lt;</span> <span class="token string">" 年龄： "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//5.关闭文件</span>ifs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++黑马程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++黑马程序员---一、指针</title>
      <link href="posts/514bb67d.html"/>
      <url>posts/514bb67d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-1-指针定义语法"><a href="#1-1-指针定义语法" class="headerlink" title="1.1  指针定义语法"></a>1.1  指针定义语法</h2><p>数据类型 * 指针变量名 </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token operator">*</span> p<span class="token punctuation">;</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-2-使用指针"><a href="#1-2-使用指针" class="headerlink" title="1.2  使用指针"></a>1.2  使用指针</h2><p>可以通过解引用的方式来找到指针指向的内存。<br>指针前加 * 代表解引用，找到指针指向的内存中的数据。</p><h2 id="1-3-占用空间"><a href="#1-3-占用空间" class="headerlink" title="1.3  占用空间"></a>1.3  占用空间</h2><p>在32位操作系统下：占用四个字节空间<br>在64位操作系统下：占用八个字节空间</p><h2 id="1-4-空指针和野指针"><a href="#1-4-空指针和野指针" class="headerlink" title="1.4  空指针和野指针"></a>1.4  空指针和野指针</h2><p>空指针用于给指针变量进行初始化<br>空指针是不可以进行访问的<br>野指针：指针变量指向非法的内存空间<br>空指针和野指针都不是我们申请的空间，因此不要随意访问。</p><h2 id="1-5-const修饰指针和常量"><a href="#1-5-const修饰指针和常量" class="headerlink" title="1.5  const修饰指针和常量"></a>1.5  const修饰指针和常量</h2><p>const修饰指针——常量指针<br>指针的指向可以修改，但是指针指向的指不可以改。<br>const  int  * p=&amp;a;     </p><p>const修饰常量——指针常量<br>指针的指向不可以改，但是指针指向的值可以改。<br>int * const p=&amp;a;    </p><p>const即修饰指针又修饰常量<br>指针的指向和指针指向的值都不可以改。<br>const int * const p=&amp;a;</p><h2 id="1-6-指针和数组"><a href="#1-6-指针和数组" class="headerlink" title="1.6  指针和数组"></a>1.6  指针和数组</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//指针和数组</span>    <span class="token comment">//利用指针访问数组中的元素</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第一个元素为:"</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token operator">/</span> <span class="token operator">/</span>arr就是数组首地址    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"利用指针访问第一个元素:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//让指针向后偏移4个字节</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"利用指针访问第二个元素:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endlsm<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout <span class="token operator">&lt;&lt;</span> ”利用指针遍历数组"<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//cout &lt;&lt; arr[i] &lt;&lt; endl;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>p2<span class="token operator">&lt;&lt;</span> end1<span class="token punctuation">;</span>    p2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-7-指针和函数"><a href="#1-7-指针和函数" class="headerlink" title="1.7  指针和函数"></a>1.7  指针和函数</h2><p>值传递</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap01</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>地址传递</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap02</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>p2<span class="token punctuation">)</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++黑马程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++黑马程序员---六、类和对象</title>
      <link href="posts/556cafdf.html"/>
      <url>posts/556cafdf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>c++面向对象三大特性：封装、继承、多态。</p><h2 id="6-1-封装"><a href="#6-1-封装" class="headerlink" title="6.1  封装"></a>6.1  封装</h2><h3 id="6-1-1-封装的意义"><a href="#6-1-1-封装的意义" class="headerlink" title="6.1.1  封装的意义"></a>6.1.1  封装的意义</h3><ol><li>将属性和行为作为一个整体。(放在一个class里面)<ol start="2"><li>将属性和行为加以权限控制。<br> public公共权限：类内外都可以访问<br> protected保护权限： 类外不可以访问<br> private私有权限： 类外不可以访问</li></ol></li></ol><pre class="line-numbers language-none"><code class="language-none">//定义一个圆类#define PI 3.14//class 定义一个类 circle是类的名字class circle{//访问权限：公共权限public://属性int r;//行为double circumference( ){return r * PI * 2;}};int main(){circle c1;//创建具体的圆（对象）（实例化）c1.r = 10;//给具体的圆的属性赋值cout &lt;&lt; "圆的周长为:" &lt;&lt; c1.circumference() &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-2-struct和class的区别"><a href="#6-1-2-struct和class的区别" class="headerlink" title="6.1.2  struct和class的区别"></a>6.1.2  struct和class的区别</h3><p>struct默认权限为： 共有  public<br>class默认权限为：   私有  private</p><h3 id="6-1-3-将成员属性设为私有"><a href="#6-1-3-将成员属性设为私有" class="headerlink" title="6.1.3  将成员属性设为私有"></a>6.1.3  将成员属性设为私有</h3><p>优点：<br>①将成员属性设为私有，可以自己控制读写的权限。<br>②对于写权限，可以检测数据的有效性。</p><pre class="line-numbers language-none"><code class="language-none">class person{private:string name;//可读写int age;//只读string lover;//只写public:void SetName(string s){name = s;}string GetName(){return name;}int GetAge(){age = 18;return age;}void SetLover(string s){lover = s;}};int main(){person p1;p1.SetName("xiyang");p1.SetLover("2A");cout &lt;&lt; "姓名为：" &lt;&lt; p1.GetName() &lt;&lt; endl;cout &lt;&lt; "年龄为：" &lt;&lt; p1.GetAge() &lt;&lt; endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设计案例1：立方体类"><a href="#设计案例1：立方体类" class="headerlink" title="设计案例1：立方体类"></a>设计案例1：立方体类</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*要求：1.设计一个立方体类2.求出立方体的面积和体积3.分别用全局函数和成员函数判断两个立方体是否相等*/</span><span class="token keyword">class</span> <span class="token class-name">cube</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token comment">//属性</span><span class="token keyword">int</span> L<span class="token punctuation">;</span><span class="token keyword">int</span> W<span class="token punctuation">;</span><span class="token keyword">int</span> H<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//行为</span><span class="token comment">//设置 获取长，宽，高</span><span class="token keyword">void</span> <span class="token function">SetL</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>L <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">GetL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SetW</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>W <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">GetW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> W<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SetH</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>H <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">GetH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> H<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//获得面积</span><span class="token keyword">int</span> <span class="token function">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>L <span class="token operator">*</span> W<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>L <span class="token operator">*</span> H<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>W <span class="token operator">*</span> H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//获得体积</span><span class="token keyword">int</span> <span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> L <span class="token operator">*</span> W <span class="token operator">*</span> H<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//成员函数判断</span><span class="token keyword">bool</span> <span class="token function">isSameByClass</span><span class="token punctuation">(</span>cube<span class="token operator">&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">GetL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> L <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">GetW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span>W <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">GetH</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> H<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//全局函数判断</span><span class="token keyword">bool</span> <span class="token function">isSame</span><span class="token punctuation">(</span>cube<span class="token operator">&amp;</span> c1<span class="token punctuation">,</span> cube<span class="token operator">&amp;</span> c2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">GetL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> c2<span class="token punctuation">.</span><span class="token function">GetL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> c1<span class="token punctuation">.</span><span class="token function">GetW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> c2<span class="token punctuation">.</span><span class="token function">GetW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> c1<span class="token punctuation">.</span><span class="token function">GetH</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> c2<span class="token punctuation">.</span><span class="token function">GetH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cube c1<span class="token punctuation">,</span>c2<span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">SetL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">SetW</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">SetH</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c2<span class="token punctuation">.</span><span class="token function">SetL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c2<span class="token punctuation">.</span><span class="token function">SetW</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c2<span class="token punctuation">.</span><span class="token function">SetH</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第一个立方体的面积为："</span> <span class="token operator">&lt;&lt;</span> c1<span class="token punctuation">.</span><span class="token function">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第一个立方体的体积为："</span> <span class="token operator">&lt;&lt;</span> c1<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">bool</span> ret1 <span class="token operator">=</span> <span class="token function">isSame</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret1<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局函数判断c1 c2相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局函数判断c1 c2不相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">bool</span> ret2 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">isSameByClass</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret2<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"成员函数判断c1 c2相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"成员函数判断c1 c2不相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设计案例2：点和圆的关系"><a href="#设计案例2：点和圆的关系" class="headerlink" title="设计案例2：点和圆的关系"></a>设计案例2：点和圆的关系</h3><p><strong>源.cpp</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"point.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"circle.h"</span></span><span class="token keyword">void</span> <span class="token function">IsInCircle</span><span class="token punctuation">(</span>Circle <span class="token operator">&amp;</span>c<span class="token punctuation">,</span>Point <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> distance <span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> rdistance <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> c<span class="token punctuation">.</span><span class="token function">getR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">==</span> rdistance<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"点在圆上"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">&gt;</span> rdistance<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"点在圆外"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"点在圆内"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Circle c<span class="token punctuation">;</span>Point center<span class="token punctuation">;</span>Point q<span class="token punctuation">;</span>center<span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>center<span class="token punctuation">.</span><span class="token function">setY</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">setY</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">setCenter</span><span class="token punctuation">(</span>center<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">setR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">IsInCircle</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>circle.h</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"point.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">setR</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setCenter</span><span class="token punctuation">(</span>Point center<span class="token punctuation">)</span><span class="token punctuation">;</span>Point <span class="token function">getCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_R<span class="token punctuation">;</span>Point m_Center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>circle.cpp</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"circle.h"</span></span><span class="token keyword">void</span> <span class="token class-name">Circle</span><span class="token operator">::</span><span class="token function">setR</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>m_R <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token class-name">Circle</span><span class="token operator">::</span><span class="token function">getR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> m_R<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">Circle</span><span class="token operator">::</span><span class="token function">setCenter</span><span class="token punctuation">(</span>Point center<span class="token punctuation">)</span><span class="token punctuation">{</span>m_Center <span class="token operator">=</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span>Point <span class="token class-name">Circle</span><span class="token operator">::</span><span class="token function">getCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> m_Center<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>point.h</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">setX</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setY</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_X<span class="token punctuation">;</span><span class="token comment">//д</span><span class="token keyword">int</span> m_Y<span class="token punctuation">;</span><span class="token comment">//д</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>point.cpp</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"point.h"</span></span><span class="token keyword">void</span> <span class="token class-name">Point</span><span class="token operator">::</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>m_X <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token class-name">Point</span><span class="token operator">::</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> m_X<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">Point</span><span class="token operator">::</span><span class="token function">setY</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>m_Y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token class-name">Point</span><span class="token operator">::</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> m_Y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-2-对象的初始化和清理"><a href="#6-2-对象的初始化和清理" class="headerlink" title="6.2  对象的初始化和清理"></a>6.2  对象的初始化和清理</h2><p>C++利用构造函数和析构函数解决了对象的初始化和清理。对象的初始化和清理工作是编译器强制要求我们做的事情，因此就算我们不提供构造和析构，编译器也会提供，只不过编译器提供的是构造函数和析构函数的空实现。</p><h3 id="6-2-1-构造函数"><a href="#6-2-1-构造函数" class="headerlink" title="6.2.1  构造函数"></a>6.2.1  构造函数</h3><p><strong>定义</strong>：主要作用在创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。<br><strong>语法</strong>：类名 () { }<br><strong>注意：</strong>①没有返回值，不用写void。<br>    ②函数名与类名相同。<br>    ③构造函数可以有参数，可以发生重载。<br>    ④创建对象时，构造函数会自动调用，并且只调用一次。<br><strong>分类：</strong><br>按参数分类：有参构造和无参构造（默认构造）<br>按类型分类：普通构造和拷贝构造<br><strong>调用方式：</strong><br>括号法、显示法、隐式转换法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//构造的分类和调用</span><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//无参（普通构造）（默认构造）</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无参构造函数调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//有参（普通构造）</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"有参构造函数调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//拷贝构造函数</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">const</span> person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span>   <span class="token comment">//加const作用，拷贝之后防止本体被修改</span><span class="token punctuation">{</span>age <span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">//克隆数据</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//括号法</span>person p1<span class="token punctuation">;</span><span class="token comment">//不能加(),加了()编译器会认为是一个函数声明，在一个函数体里可以声明另一个函数</span>person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//p2的年龄初始化为10</span>person <span class="token function">p3</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示法</span>person p4 <span class="token operator">=</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person p5 <span class="token operator">=</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person p6 <span class="token operator">=</span> <span class="token function">person</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//person()为匿名对象，没有名字，但创建了对象，特点：当前行执行结束后系统就会回收掉匿名对象</span><span class="token comment">//不要用拷贝构造函数初始化匿名对象，如person(p3)，等价于person p3</span><span class="token comment">//隐式转换法</span>person p7 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//转换为：person p7=person(10)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/funuyKZf.png" alt="6.1"></p><h3 id="6-2-2-析构函数"><a href="#6-2-2-析构函数" class="headerlink" title="6.2.2  析构函数"></a>6.2.2  析构函数</h3><p><strong>定义</strong>：主要作用在于对象销毁前系统自动调用，执行一些清理工作。<br><strong>语法</strong>：~类名 () { }<br><strong>注意</strong>：<br>①没有返回值，不写void<br>②函数名和类名相同，在名称前加~<br>③析构函数不可以有参数，不可以发生重载<br>④对象在销毁前会自动调用析构函数，并且只会调用一次</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//构造函数和析构函数例子</span><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"构造函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">~</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"析构函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>person P<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/jWvLWBlU.png" alt="6.2"></p><h3 id="6-2-3-拷贝构造函数调用时机"><a href="#6-2-3-拷贝构造函数调用时机" class="headerlink" title="6.2.3  拷贝构造函数调用时机"></a>6.2.3  拷贝构造函数调用时机</h3><p>C++中拷贝函数调用一般有三种情况：<br>        ①使用一个已创建完毕的对象来初始化一个新对象。<br>        ②值传递的方式给函数参数传值。<br>        ③以值的方式返回局部对象。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"默认构造函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"默认构造函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">const</span> person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">//克隆数据</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span>  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span>person p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>person <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>person p<span class="token punctuation">;</span><span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//使用一个已创建完毕的对象来初始化一个新对象</span>person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person <span class="token function">p2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//值传递的方式给函数参数传值,拷贝一份临时副本作为形参，改变临时副本的值不影响实参</span>person p3<span class="token punctuation">;</span><span class="token function">test1</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以值的方式返回局部对象，return返回时返回的不是局部对象，而是拷贝一个新对象返回</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-4-构造函数调用规则"><a href="#6-2-4-构造函数调用规则" class="headerlink" title="6.2.4  构造函数调用规则"></a>6.2.4  构造函数调用规则</h3><p>创建一个类，C++至少给每一个类添加4个函数：<br>1、默认构造(空实现)<br>2、析构函数(空实现)<br>3、拷贝构造(值拷贝)<br>4、赋值运算符Operator=对属性进行值拷贝<br>①如果用户定义一个有参构造函数，C++不会提供默认构造函数，但是会提供拷贝构造函数。<br>②如果用户定义一个拷贝构造函数，C++不会提供别的构造函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//eg.①如果用户定义一个有参构造函数，C++不会提供默认构造函数，但是会提供拷贝构造函数</span><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"默认构造函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span>  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>person p1<span class="token punctuation">;</span><span class="token comment">//err</span>person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person <span class="token function">p3</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝构造函数</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-5-深拷贝与浅拷贝"><a href="#6-2-5-深拷贝与浅拷贝" class="headerlink" title="6.2.5  深拷贝与浅拷贝"></a>6.2.5  深拷贝与浅拷贝</h3><p><strong>浅拷贝</strong>：简单的赋值拷贝。<br><strong>深拷贝</strong>：在堆区重新申请空间，进行拷贝。<br><strong>浅拷贝存在的问题</strong>：属性有在堆区开辟的，拷贝之后两个类成员堆区属性都指向同一个地址，新拷贝成员执行析构操作之后，堆区内存被释放，旧成员执行析构操作就会使堆区内容重复释放。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/tDdbOfEm.png" alt="6.3"></p><p>解决方法：使两个成员堆区内容指向不同的地址，即进行深拷贝。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/9FoCItMX.png" alt="6.4"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span>height <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"有参构造函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">const</span> person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">//height=p.height;//编译器默认实现</span>height <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">~</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">delete</span> height<span class="token punctuation">;</span>height <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"析构函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span>  <span class="token function">GetAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">GetHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">*</span>height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1的年龄为："</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span><span class="token function">GetAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" p1的身高为："</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span><span class="token function">GetHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>person <span class="token function">p2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span><span class="token function">GetAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" p2的身高为："</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span><span class="token function">GetHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-6-初始化列表"><a href="#6-2-6-初始化列表" class="headerlink" title="6.2.6  初始化列表"></a>6.2.6  初始化列表</h3><p><strong>作用：</strong> 用来初始化属性。<br><strong>语法：</strong> 构造函数（）：属性1（值1），属性2（值2）…{}</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//初始化列表初始化属性</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">weigh</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">age</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">weigh</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">int</span> weigh<span class="token punctuation">;</span><span class="token keyword">int</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>person p1<span class="token punctuation">;</span>person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1的年龄，体重，身高为：\n"</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>weigh <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>height<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄，体重，身高为：\n"</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>weigh <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>height<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-7-类对象作为类的成员"><a href="#6-2-7-类对象作为类的成员" class="headerlink" title="6.2.7  类对象作为类的成员"></a>6.2.7  类对象作为类的成员</h3><p><strong>注意：</strong>当其他类对象作为本类成员，构造时先构造类对象，再构造自身。析构顺序和构造顺序相反。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Phone</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">PhoneName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>string PhoneName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string p<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">PersonName</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PhoneName</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>string PersonName<span class="token punctuation">;</span>string PhoneName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Person <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"gua"</span><span class="token punctuation">,</span> <span class="token string">"iphone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>PersonName <span class="token operator">&lt;&lt;</span> endl<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">.</span>PhoneName <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-8-静态成员"><a href="#6-2-8-静态成员" class="headerlink" title="6.2.8  静态成员"></a>6.2.8  静态成员</h3><p>静态成员就是在成员变量和成员函数前加上关键字static。<br><strong>静态成员变量：</strong><br>    所有对象共享一份数据。<br>    在编译阶段分配内存（运行之前就分配了）。<br>    类内声明，类外初始化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment">//类内声明</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Person<span class="token operator">::</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//类外初始化</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Person p1<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a的值为："</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Person p2<span class="token punctuation">;</span>p2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a的值为："</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**    注意：**静态成员变量不属于某一个对象。因此有两种访问方式：①类名访问，②对象访问。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Person<span class="token operator">::</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//对象访问</span>Person p1<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//类名访问</span>cout  <span class="token operator">&lt;&lt;</span> Person<span class="token operator">::</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态成员变量也有访问权限(类外访问不到私有静态成员变量)。<br><strong>静态成员函数：</strong><br>所有对象共享一个函数。<br>静态成员函数只能访问静态成员变量(访问成员变量，函数无法区分是哪个对象的成员变量)。<br>静态成员函数也有两种访问方式：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//静态成员函数的访问</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"static void test()调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//对象访问</span>Person p<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//成员访问</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//静态成员函数只能访问静态成员函数</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">//err，对象不明</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"static void test()调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment">//静态成员函数访问静态成员变量</span><span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token comment">//非静态成员函数</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Person<span class="token operator">::</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Person p<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态成员函数也有访问权限（类外访问不到私有静态成员函数）。</p><h2 id="6-3-C-对象模型和this指针"><a href="#6-3-C-对象模型和this指针" class="headerlink" title="6.3  C++对象模型和this指针"></a>6.3  C++对象模型和this指针</h2><h3 id="6-3-1-成员变量和成员函数分开存储"><a href="#6-3-1-成员变量和成员函数分开存储" class="headerlink" title="6.3.1  成员变量和成员函数分开存储"></a>6.3.1  成员变量和成员函数分开存储</h3><p>在C++中，类的成员变量和成员函数分开存储，只有非静态成员变量才属于类的对象上。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">person1</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">person2</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment">//非静态成员变量</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">person3</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token comment">//静态成员变量</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">person4</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token comment">//静态成员变量</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//非静态成员函数</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//空对象占用内存是 1</span><span class="token comment">//C++会给每一个空对象分配一个字节的内存空间，为了区分空对象占内存的位置</span><span class="token comment">//每一个空对象也应该有一个独一无二的内存地址</span>person1 p1<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(p)="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//1</span><span class="token comment">//虽然空对象有一个字节，但是一旦类里面不为空就跟着类中字节走</span>person2 p2<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(p)="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//4</span><span class="token comment">//静态成员变量不属于类对象上的</span>person3 p3<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(p)="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//4</span><span class="token comment">//类的成员变量和成员函数分开存储</span>person4 p4<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(p)="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//4</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-2-this指针的概念"><a href="#6-3-2-this指针的概念" class="headerlink" title="6.3.2  this指针的概念"></a>6.3.2  this指针的概念</h3><p>this指针指向被调用的成员函数所属的对象。<br>this指针隐含在每一个非静态成员函数内的一种指针。<br>this指针不需要定义，可直接使用。<br><strong>this指针的用途：</strong><br>    当形参和成员变量同名时，可以用this指针来区分。（解决名称冲突）<br>    在类的非静态成员函数中返回对象本身，可以用retrun <em>this（返回对象本身用 *this）<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/uQAQgNHv.png" alt="6.5"><br>形参与成员变量名称相同时，无法进行赋值，利用this指针解决<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/0nSlnGTs.png" alt="6.6"><br>*</em>    在类的非静态成员函数中返回对象本身，可以用retrun *this**</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>person<span class="token operator">&amp;</span> <span class="token function">test</span><span class="token punctuation">(</span>person p<span class="token punctuation">)</span><span class="token comment">//person一定要加&amp;，使用本体</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">+=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//链式编程</span>p2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不加引用，每次返回的都是拷贝构造函数构造的新的对象，和原来不一样，要多次连续对一个对象操作，需要加上引用。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/GtQ597Mb.png" alt="6.7"></p><h3 id="6-3-3-空指针访问成员函数"><a href="#6-3-3-空指针访问成员函数" class="headerlink" title="6.3.3  空指针访问成员函数"></a>6.3.3  空指针访问成员函数</h3><p>C++中空指针可以调用成员函数，但要注意有没有用到this指针。如果用到this指针，需要加以判断保证代码的健壮性。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"test1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"age="</span><span class="token operator">&lt;&lt;</span>age<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//age相当于this-&gt;age</span><span class="token punctuation">}</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>person <span class="token operator">*</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>p<span class="token operator">-&gt;</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-&gt;</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//err，传入的指针为空</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>** 改正方法：**</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>age<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//提高代码的健壮性</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"age="</span><span class="token operator">&lt;&lt;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>age<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//err，传入的指针为空</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-4-const修饰成员函数"><a href="#6-3-4-const修饰成员函数" class="headerlink" title="6.3.4  const修饰成员函数"></a>6.3.4  const修饰成员函数</h3><p>const,限制为只读状态。<br><strong>常函数：</strong>（成员函数<strong>后加const</strong>）<br>常函数内不可以修改成员属性。<br>    成员属性声明时加关键字mutable后，在常函数中依然可以修改。<br><strong>函数中</strong>this指针的定义相当于 Person * const this，<strong>指针的指向不可以修改，但指针指向的值可以修改</strong>。<br><strong>常函数中</strong>this指针的定义相当于const Person * const this，<strong>指针的指向和指针指向的值均不可修改</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> <span class="token comment">//err b是常量不可以修改</span>c <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//在成员函数后加const，修饰的是this指向，让指针指向的值不能改变</span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment">//err 相当于this-&gt;a=100 </span>b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>  <span class="token comment">//err b是常量不可修改</span>c <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token keyword">mutable</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>person p<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>常对象：</strong>（声明对象前加const）<br><strong>常对象只能调用常函数。</strong>（常对象本身不允许修改对象属性，如果常对象调用的常函数对对象属性进行了修改，相当于间接的对常对象的属性进行了修改，所以常对象只能调用不能对对象属性进行修改的函数即常函数）<br>常对象<strong>可以修改声明时加关键字mutable的成员属性</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span>  <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token keyword">mutable</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> person p<span class="token punctuation">;</span><span class="token comment">//不能修改指针指向的值</span>p<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//err</span>p<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">//err</span>p<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//err 常对象只能调用常函数</span>p<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-4-友元"><a href="#6-4-友元" class="headerlink" title="6.4  友元"></a>6.4  友元</h2><p>友元的目的就是让一个函数或者类访问另一个类中的私有成员。<br>在 private 和 public 中声明均可。</p><h3 id="6-4-1-全局函数做友元"><a href="#6-4-1-全局函数做友元" class="headerlink" title="6.4.1  全局函数做友元"></a>6.4.1  全局函数做友元</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//全局函数做友元</span><span class="token keyword">class</span> <span class="token class-name">building</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>string bedroom<span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span>building<span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//声明友元函数</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>bedroom <span class="token operator">=</span> <span class="token string">"卧室"</span><span class="token punctuation">;</span>livingroom <span class="token operator">=</span> <span class="token string">"客厅"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string livingroom<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span>building<span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"访问"</span> <span class="token operator">&lt;&lt;</span> b<span class="token operator">-&gt;</span>livingroom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; "访问" &lt;&lt; b-&gt;bedroom &lt;&lt; endl;//err 不可访问私有成员</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span>building<span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"访问"</span> <span class="token operator">&lt;&lt;</span> b<span class="token operator">-&gt;</span>livingroom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"访问"</span> <span class="token operator">&lt;&lt;</span> b<span class="token operator">-&gt;</span>bedroom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-2-类做友元"><a href="#6-4-2-类做友元" class="headerlink" title="6.4.2  类做友元"></a>6.4.2  类做友元</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//类做友元</span><span class="token keyword">class</span> <span class="token class-name">Building</span> <span class="token punctuation">{</span><span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">GoodGay2</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string Livingroom<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>string Bedroom<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GoodGay1</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">GoodGay1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Building<span class="token operator">*</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GoodGay2</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">GoodGay2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Building<span class="token operator">*</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Building</span><span class="token operator">::</span><span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Bedroom <span class="token operator">=</span> <span class="token string">"卧室"</span><span class="token punctuation">;</span>Livingroom <span class="token operator">=</span> <span class="token string">"客厅"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//非友元</span><span class="token class-name">GoodGay1</span><span class="token operator">::</span><span class="token function">GoodGay1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p <span class="token operator">=</span> <span class="token keyword">new</span> Building<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">GoodGay1</span><span class="token operator">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"朋友在访问"</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>Livingroom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"朋友在访问"</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>Bedroom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//err 没有访问权限</span><span class="token punctuation">}</span><span class="token comment">//友元</span><span class="token class-name">GoodGay2</span><span class="token operator">::</span><span class="token function">GoodGay2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p <span class="token operator">=</span> <span class="token keyword">new</span> Building<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">GoodGay2</span><span class="token operator">::</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"朋友在访问"</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>Livingroom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"朋友在访问"</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>Bedroom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>GoodGay1  g1<span class="token punctuation">;</span>g1<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>GoodGay2 g2<span class="token punctuation">;</span>g2<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-3-成员函数做友元"><a href="#6-4-3-成员函数做友元" class="headerlink" title="6.4.3  成员函数做友元"></a>6.4.3  成员函数做友元</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Building</span><span class="token punctuation">;</span><span class="token comment">//当用到友元成员函数时，需注意友元声明与友元定义之间的互相依赖。</span><span class="token keyword">class</span> <span class="token class-name">GoodGay</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">GoodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">visit1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">visit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Building<span class="token operator">*</span> building<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Building</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token class-name">GoodGay</span><span class="token operator">::</span><span class="token function">visit1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>string LivingRoom<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>string BedRoom<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Building</span><span class="token operator">::</span><span class="token function">Building</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>LivingRoom <span class="token operator">=</span> <span class="token string">"客厅"</span><span class="token punctuation">;</span>BedRoom <span class="token operator">=</span> <span class="token string">"卧室"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">GoodGay</span><span class="token operator">::</span><span class="token function">GoodGay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>building <span class="token operator">=</span> <span class="token keyword">new</span> Building<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">GoodGay</span><span class="token operator">::</span><span class="token function">visit1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"visit函数正在访问："</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-&gt;</span>LivingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"visit函数正在访问："</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-&gt;</span>BedRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">GoodGay</span><span class="token operator">::</span><span class="token function">visit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"visit函数正在访问："</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-&gt;</span>LivingRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"visit函数正在访问："</span> <span class="token operator">&lt;&lt;</span> building<span class="token operator">-&gt;</span>BedRoom <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>GoodGay gg<span class="token punctuation">;</span>gg<span class="token punctuation">.</span><span class="token function">visit1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>GoodGay gg<span class="token punctuation">;</span>gg<span class="token punctuation">.</span><span class="token function">visit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-5-运算符重载"><a href="#6-5-运算符重载" class="headerlink" title="6.5  运算符重载"></a>6.5  运算符重载</h2><p>运算符重载对已有的运算符重新定义，赋予另一种功能，以适应<strong>不同的数据类型</strong>。<br>对内置的数据类型，编译器知道如何进行运算，对非内置的数据类型就需要对运算符进行重载。</p><h3 id="6-5-1-加号运算符重载"><a href="#6-5-1-加号运算符重载" class="headerlink" title="6.5.1  加号运算符重载"></a>6.5.1  加号运算符重载</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//成员函数实现+重载</span>Person <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>Person temp<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_A <span class="token operator">+</span> p<span class="token punctuation">.</span>m_A<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>m_B <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_B <span class="token operator">+</span> p<span class="token punctuation">.</span>m_B<span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token keyword">int</span> m_B<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//全局函数实现+重载</span>Person <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> p1<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span> p2<span class="token punctuation">)</span><span class="token punctuation">{</span>Person temp<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>m_A <span class="token operator">=</span> p1<span class="token punctuation">.</span>m_A <span class="token operator">+</span> p2<span class="token punctuation">.</span>m_A<span class="token punctuation">;</span>temp<span class="token punctuation">.</span>m_B <span class="token operator">=</span> p1<span class="token punctuation">.</span>m_B <span class="token operator">+</span> p2<span class="token punctuation">.</span>m_B<span class="token punctuation">;</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Person p1<span class="token punctuation">;</span>p1<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>m_B <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>Person p2<span class="token punctuation">;</span>p2<span class="token punctuation">.</span>m_A <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span>m_B <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>Person p3 <span class="token operator">=</span> p1 <span class="token operator">+</span> p2<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> p3<span class="token punctuation">.</span>m_B <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运算符重载也可以发生函数重载。<br>对于内置的数据类型的表达式的运算符是不可能改变的。<br>不要滥用运算符重载。（加法写成减法，减法写成乘法，别人可能看不懂代码）</p><h3 id="6-5-2-左移运算符（-lt-lt-）的重载"><a href="#6-5-2-左移运算符（-lt-lt-）的重载" class="headerlink" title="6.5.2  左移运算符（<<）的重载"></a>6.5.2  左移运算符（&lt;&lt;）的重载</h3><p><strong>作用：</strong>可以输出自定义的数据类型。<br><strong>加&amp;的原因：</strong><br>输入 ostream&amp; cout带&amp;的原因是因为输出流对象cout全局只能有一个，不能创建一个新的传进来，要带引用。<br>写成：ostream&amp; operator&lt;&lt;(ostream&amp; cout, Person&amp; p)，则：cout&lt;&lt;a&lt;&lt;b;正确，因为它等同于(cout&lt;&lt;a)&lt;&lt;b;(cout&lt;&lt;a)返回cout的引用，即就是它自己，它可以再次作为左值，因而能够连着写这个输出流 。如果不加&amp; 第一个括号中返回的是cout的临时变量，它不可作为左值（因为operator &lt;&lt; (ostream&amp; cout, Person&amp; p)的第一个参数是ostream&amp;，而不是ostream），因而错误。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> cout<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//舍弃成员函数重载，简化为p.operator&lt;&lt;cout，相当于p&lt;&lt;cout</span><span class="token comment">//void operator&lt;&lt;(cout)</span><span class="token comment">//{</span><span class="token comment">//}</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>m_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>m_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> m_a<span class="token punctuation">;</span><span class="token keyword">int</span> m_b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//全局函数重载左移运算符</span><span class="token comment">//返回ostream是链式编程思想，返回后cout&lt;&lt;p&lt;&lt;...后面可以再利用</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> cout<span class="token punctuation">,</span>Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span>   <span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_a <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> cout<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-3-递增运算符的重载"><a href="#6-5-3-递增运算符的重载" class="headerlink" title="6.5.3  递增运算符的重载"></a>6.5.3  递增运算符的重载</h3><p>作用：通过重载递增运算符，实现自己的整型数据。<br><strong>重载 &lt;&lt; 时 Intege r加 &amp; 后输出 myint++ 报错，不加 &amp; 不会报错。</strong><br><strong>原因：后置++不是一个可修改的左值，非常量引用必须是一个可修改的左值。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Integer</span> <span class="token punctuation">{</span><span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> cout<span class="token punctuation">,</span> Integer p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//前置++</span><span class="token comment">//&amp;的作用是对同一个数据进行递增</span>Integer<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//先++</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//再返回</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//后置++</span><span class="token comment">//int是占位参数</span>Integer <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//先暂存</span>Integer temp<span class="token operator">=</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">//再++</span>num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//返回暂存的数据</span><span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> cout<span class="token punctuation">,</span> Integer p<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token keyword">return</span> cout<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Integer myint<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>myint <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> myint <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Integer myint<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> myint<span class="token operator">++</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> myint <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-4-赋值运算符重载"><a href="#6-5-4-赋值运算符重载" class="headerlink" title="6.5.4  赋值运算符重载"></a>6.5.4  赋值运算符重载</h3><p>创建一个类，C++ 至少给每一个类添加4个函数：默认构造(空实现)，析构函数(空实现)，拷贝构造(值拷贝)，赋值运算符 operator= 对属性进行值拷贝。<br><strong>赋值运算符重载要注意数据存放在堆区时，浅拷贝带来的问题。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//赋值运算符的重载</span><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>age<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">~</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">delete</span> age<span class="token punctuation">;</span>age <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//重载赋值运算符以避免浅拷贝带来的问题</span>person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//age=p.age;//编译器默认实现</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">delete</span> age<span class="token punctuation">;</span>age <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回自身</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token operator">*</span>age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p3<span class="token operator">=</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//10</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//10</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-5-关系运算符的重载"><a href="#6-5-5-关系运算符的重载" class="headerlink" title="6.5.5  关系运算符的重载"></a>6.5.5  关系运算符的重载</h3><p><strong>作用：</strong>可以让两个自定义类型对象进行对比操作。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//关系运算符重载 == !=</span><span class="token keyword">class</span> <span class="token class-name">person</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">person</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">name</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">age</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>name <span class="token operator">==</span> p<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>age <span class="token operator">==</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1和p2相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1和p2不相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-6-函数调用运算符-重载"><a href="#6-5-6-函数调用运算符-重载" class="headerlink" title="6.5.6  函数调用运算符()重载"></a>6.5.6  函数调用运算符()重载</h3><p>重载后的使用方式非常像函数调用，因此称为仿函数。<br>仿函数没有固定写法，非常灵活。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyPrint</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>string test<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> test <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MyPrint02</span><span class="token punctuation">(</span>string test<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> test <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>MyPrint myprint<span class="token punctuation">;</span><span class="token function">myprint</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使用起来非常类似函数调用，因此称为仿函数</span><span class="token function">MyPrint02</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//仿函数非常灵活，没有固定的写法</span><span class="token comment">//加法类</span><span class="token keyword">class</span> <span class="token class-name">MyAdd</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>MyAdd myadd<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">myadd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//匿名函数对象</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">MyAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-6-继承"><a href="#6-6-继承" class="headerlink" title="6.6  继承"></a>6.6  继承</h2><h3 id="6-6-1-继承的基本语法"><a href="#6-6-1-继承的基本语法" class="headerlink" title="6.6.1  继承的基本语法"></a>6.6.1  继承的基本语法</h3><p><strong>继承的好处：</strong>减少重复代码。<br><strong>语法：</strong>class 子类 : 继承方式 父类{};<br>派生类中的成员包含两部分：一类是从基类继承过来的（共性），一类是自己增加的成员（个性）。</p><h3 id="6-6-2-继承的方式"><a href="#6-6-2-继承的方式" class="headerlink" title="6.6.2  继承的方式"></a>6.6.2  继承的方式</h3><p>公共继承，public<br>保护继承，protected<br>私有继承，private<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/i7E0Rtuu.png" alt="6.8"></p><h3 id="6-6-3-继承中的对象模型"><a href="#6-6-3-继承中的对象模型" class="headerlink" title="6.6.3  继承中的对象模型"></a>6.6.3  继承中的对象模型</h3><p>父类中的所有非静态成员属性都会被子类继承<br>父类的私有成员被编译器隐藏，访问不到但是被继承</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> d<span class="token punctuation">;</span><span class="token comment">//不继承</span><span class="token keyword">protected</span><span class="token operator">:</span><span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//父类中的所有非静态成员属性都会被子类继承</span><span class="token comment">//父类的私有成员被编译器隐藏，访问不到但是被继承</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size of(son)="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//16</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>利用工具查看：</strong><br>1.<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/9quS75aZ.png" alt="6.9"><br>2. 跳转盘符<br>3.跳转文件路径  cd 具体路径下<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/SsGVpEYA.png" alt="6.10"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/XgyfiKYp.png" alt="6.11"><br>4.查看命名</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cl <span class="token operator">/</span>d1 reportSingleClassLayout查看的类名 所属文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/BqTuTaww.png" alt="6.12"></p><h3 id="6-6-4-继承中构造和析构顺序"><a href="#6-6-4-继承中构造和析构顺序" class="headerlink" title="6.6.4  继承中构造和析构顺序"></a>6.6.4  继承中构造和析构顺序</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"父类构造"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"父类析构"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"子类构造"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">~</span><span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"子类析构"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/kHTpvkdO.png" alt="6.13"></p><h3 id="6-6-5-继承中同名成员的处理方式"><a href="#6-6-5-继承中同名成员的处理方式" class="headerlink" title="6.6.5  继承中同名成员的处理方式"></a>6.6.5  继承中同名成员的处理方式</h3><p>子类对象访问子类同名成员：直接访问<br>子类对象访问父类同名成员：加作用域<br>如果子类中出现和父类同名的成员函数，子类同名成员函数会隐藏掉父类中所有的同名成员函数（父类中同名成员函数，和同名成员函数的重载函数）。        </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>m_A<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base_func"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>m_A <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son_func"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//同名成员属性处理</span><span class="token punctuation">{</span>Son son<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> son<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> son<span class="token punctuation">.</span>Base<span class="token operator">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//同名成员函数处理</span><span class="token punctuation">{</span>Son son<span class="token punctuation">;</span>son<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>son<span class="token punctuation">.</span><span class="token class-name">Base</span><span class="token operator">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-6-6-继承同名静态成员处理方式"><a href="#6-6-6-继承同名静态成员处理方式" class="headerlink" title="6.6.6  继承同名静态成员处理方式"></a>6.6.6  继承同名静态成员处理方式</h3><p>静态成员和非静态成员出现同名时，处理方式一致。<br>注意通过对象访问和通过类名访问两种方式。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base_func"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Base<span class="token operator">::</span>m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Son_func"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">int</span> m_A<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Son<span class="token operator">::</span>m_A <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//同名成员属性处理</span><span class="token punctuation">{</span><span class="token comment">//通过对象访问</span>Son son<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> son<span class="token punctuation">.</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> son<span class="token punctuation">.</span>Base<span class="token operator">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//通过类名访问</span>cout <span class="token operator">&lt;&lt;</span> Son<span class="token operator">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> Son<span class="token operator">::</span>Base<span class="token operator">::</span>m_A <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//同名成员函数处理</span><span class="token punctuation">{</span><span class="token comment">//通过对象访问</span>Son son<span class="token punctuation">;</span>son<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>son<span class="token punctuation">.</span><span class="token class-name">Base</span><span class="token operator">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过类名访问</span><span class="token class-name">Son</span><span class="token operator">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Son<span class="token operator">::</span><span class="token class-name">Base</span><span class="token operator">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-6-7-多继承语法"><a href="#6-6-7-多继承语法" class="headerlink" title="6.6.7  多继承语法"></a>6.6.7  多继承语法</h3><p><strong>语法</strong>：class 子类 ：继承方式 父类1，继承方式 父类2，…<br>实际开发中不建议使用多继承。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base1</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Base1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base2</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Base2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base1</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Base2</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>c <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-6-8-菱形继承"><a href="#6-6-8-菱形继承" class="headerlink" title="6.6.8  菱形继承"></a>6.6.8  菱形继承</h3><p>两个派生类继承同一个基类，又有某个类同时继承者两个派生类。<br>主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义，通过虚继承来解决。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Sheep</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Camel</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SheepCamel</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Sheep</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Camel</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Sheep sheep<span class="token punctuation">;</span>sheep<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>Camel camel<span class="token punctuation">;</span>camel<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>SheepCamel sheepcamel<span class="token punctuation">;</span>sheepcamel<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">38</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> sheep<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> camel<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> sheepcamel<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-7-多态"><a href="#6-7-多态" class="headerlink" title="6.7  多态"></a>6.7  多态</h2><h3 id="6-7-1-多态的基本概念"><a href="#6-7-1-多态的基本概念" class="headerlink" title="6.7.1  多态的基本概念"></a>6.7.1  多态的基本概念</h3><p><strong>多态可分为两类</strong>：<br>        静态多态：函数重载 和 运算符重载<br>动态多态：派生类和虚函数实现运行时多态<br><strong>两者的区别：</strong><br>静态多态的函数地址早绑定 - 编译阶段确定函数地址（运行前就确定了走哪一段代码）<br>动态多态的函数地址晚绑定 - 运行阶段确定函数地址（运行起来才确定走哪一段代码）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"动物在说话？"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">{</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"小猫在说话？"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"小狗在说话？"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DoSpeak</span><span class="token punctuation">(</span>Animal <span class="token operator">&amp;</span>animal<span class="token punctuation">)</span><span class="token punctuation">{</span>animal<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Cat cat<span class="token punctuation">;</span>Dog dog<span class="token punctuation">;</span><span class="token function">DoSpeak</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">DoSpeak</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>动态多态满足条件:</strong><br>有继承关系<br>子类重写父类中的虚函数（子类的virtual可有可无）<br>重写：函数返回值类型，函数名，参数列表 完全一致称为重写<br><strong>动态多态的使用</strong>：父类的指针或引用，执行子类对象。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img1.imgtp.com/2022/08/06/LOq1OOIJ.png" alt="6.14"><br>重写后，子类的vfptable中内容会发生改写。</p><h3 id="6-7-2-多态案例—-计算器类"><a href="#6-7-2-多态案例—-计算器类" class="headerlink" title="6.7.2  多态案例—-计算器类"></a>6.7.2  多态案例—-计算器类</h3><p>多态好处：<br>组织结构清晰。<br>可读性强。<br>对前期和后期的扩展以及维护性高。<br>开发中提倡开闭原则：对扩展进行开放，对修改进行关闭。<br><strong>C++开发提倡利用多态设计程序架构，因为多态优点很多。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//抽象计算机类</span><span class="token keyword">class</span> <span class="token class-name">AbstractCalculator</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">getresult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> num1<span class="token punctuation">;</span><span class="token keyword">int</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//加法计算机类</span><span class="token keyword">class</span> <span class="token class-name">AddCalculator</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractCalculator</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">getresult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//减法计算机类</span><span class="token keyword">class</span> <span class="token class-name">SubCalculator</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractCalculator</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">getresult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//乘法计算器类</span><span class="token keyword">class</span> <span class="token class-name">MulCalculator</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractCalculator</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">getresult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//父类指针执行子类对象</span>AbstractCalculator<span class="token operator">*</span> abc<span class="token punctuation">;</span><span class="token comment">//加法</span>abc <span class="token operator">=</span> <span class="token keyword">new</span> AddCalculator<span class="token punctuation">;</span>abc<span class="token operator">-&gt;</span>num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>abc<span class="token operator">-&gt;</span>num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>abc<span class="token operator">-&gt;</span><span class="token function">getresult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//减法</span>abc <span class="token operator">=</span> <span class="token keyword">new</span> SubCalculator<span class="token punctuation">;</span>abc<span class="token operator">-&gt;</span>num1 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>abc<span class="token operator">-&gt;</span>num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-&gt;</span><span class="token function">getresult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//乘法</span>abc <span class="token operator">=</span> <span class="token keyword">new</span> MulCalculator<span class="token punctuation">;</span>abc<span class="token operator">-&gt;</span>num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>abc<span class="token operator">-&gt;</span>num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> abc<span class="token operator">-&gt;</span><span class="token function">getresult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">delete</span> abc<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-7-3-纯虚函数和抽象类"><a href="#6-7-3-纯虚函数和抽象类" class="headerlink" title="6.7.3  纯虚函数和抽象类"></a>6.7.3  纯虚函数和抽象类</h3><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容，因此可以将虚函数改为<strong>纯虚函数。</strong><br><strong>纯虚函数定义</strong>：virtual 返回值类型 函数名 （参数列表）= 0 ;<br><strong>抽象类定义</strong>：当类中有了纯虚函数，这个类也称为<strong>抽象类</strong><br><strong>抽象类的特点</strong>：<br>无法实例化对象<br>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//纯虚函数</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son1</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son2</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//base b;//err 抽象类无法实例化对象</span><span class="token comment">//new base;//err </span><span class="token comment">//son1 s;//子类必须重写抽象类中的纯虚函数，否则也属于抽象类</span>son2 s<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-7-4-多态案例二—-制作饮品"><a href="#6-7-4-多态案例二—-制作饮品" class="headerlink" title="6.7.4  多态案例二—-制作饮品"></a>6.7.4  多态案例二—-制作饮品</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">AbstructDrinking</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//煮水</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">BoilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"煮水"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//冲泡</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//倒入杯中</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"倒入杯中"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//加入辅料</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">makeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">BoilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstructDrinking</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//冲泡</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"冲泡咖啡"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//加入辅料</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"加入糖和牛奶"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Tea</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstructDrinking</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token comment">//冲泡</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"冲泡茶叶"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//加入辅料</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PutSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"加入柠檬"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DoWork</span><span class="token punctuation">(</span>AbstructDrinking<span class="token operator">*</span> drink<span class="token punctuation">)</span><span class="token punctuation">{</span>drink<span class="token operator">-&gt;</span><span class="token function">makeDrink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> drink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>AbstructDrinking<span class="token operator">*</span> drink <span class="token operator">=</span> <span class="token keyword">new</span> Coffee<span class="token punctuation">;</span><span class="token function">DoWork</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>drink <span class="token operator">=</span> <span class="token keyword">new</span> Tea<span class="token punctuation">;</span><span class="token function">DoWork</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-7-5-虚析构和纯虚析构"><a href="#6-7-5-虚析构和纯虚析构" class="headerlink" title="6.7.5  虚析构和纯虚析构"></a>6.7.5  虚析构和纯虚析构</h3><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构函数，出现内存泄漏。<br><strong>解决方式：</strong>将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong>。<br><strong>虚析构语法</strong>：virtual ~类名(){}<br><strong>纯虚析构语法</strong>：virtual ~类名() = 0;<br>类名::~类名(){}<br>            纯虚析构函数要有具体的函数实现<br><strong>两者共性：</strong><br>都可以解决父类指针释放子类对象。<br>都需要具体的函数实现。<br><strong>两者区别：</strong><br>如果是纯虚析构，该类属于抽象类，无法实例化对象。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal构造函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Animal析构函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//虚析构可以解决 父类指针释放子类对象时不干净的问题</span><span class="token comment">//virtual ~Animal()</span><span class="token comment">//{</span><span class="token comment">//cout &lt;&lt; "Animal虚析构函数的调用" &lt;&lt; endl;</span><span class="token comment">//}</span><span class="token comment">//纯虚析构</span><span class="token comment">//virtual ~Animal() = 0;</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//纯虚析构函数要有具体的函数实现</span><span class="token comment">//Animal::~Animal()</span><span class="token comment">//{</span><span class="token comment">//cout &lt;&lt; "Animal纯虚析构函数的调用" &lt;&lt; endl;</span><span class="token comment">//}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Cat</span><span class="token punctuation">(</span>string n<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat的构造函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>name<span class="token operator">&lt;&lt;</span><span class="token string">"miao~"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">~</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Cat的析构函数的调用"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">delete</span> name<span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>string <span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Animal<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token string">"mimi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">-&gt;</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//父类指针在析构时候，不会调用子类中的析构函数，导致子类如果有堆区的属性，会出现内存的泄露</span><span class="token keyword">delete</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong><br>虚析构或纯虚析构就是用来解决通过父类指针释放子类对象。<br>如果子类中没有堆区数据，可以不写为虚析构或纯虚析构。<br>用于纯虚析构函数的类也属于抽象类</p><h3 id="6-7-6-多态案例三—-电脑组装"><a href="#6-7-6-多态案例三—-电脑组装" class="headerlink" title="6.7.6  多态案例三—-电脑组装"></a>6.7.6  多态案例三—-电脑组装</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//抽象不同零件的类</span><span class="token keyword">class</span> <span class="token class-name">CPU</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">VideoCard</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Memory</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//电脑类</span><span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Computer</span><span class="token punctuation">(</span>CPU<span class="token operator">*</span> cpu<span class="token punctuation">,</span> VideoCard<span class="token operator">*</span> vc<span class="token punctuation">,</span> Memory<span class="token operator">*</span> mem<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>vc <span class="token operator">=</span> vc<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>mem <span class="token operator">=</span> mem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cpu<span class="token operator">-&gt;</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vc<span class="token operator">-&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mem<span class="token operator">-&gt;</span><span class="token function">storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">~</span><span class="token function">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cpu <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cpu释放"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">delete</span> cpu<span class="token punctuation">;</span>cpu <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>vc <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"显卡释放"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">delete</span> vc<span class="token punctuation">;</span>vc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mem <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"内存条释放"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">delete</span> mem<span class="token punctuation">;</span>mem <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"电脑释放"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Cpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> cpu <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>CPU<span class="token operator">*</span> cpu<span class="token punctuation">;</span>VideoCard<span class="token operator">*</span> vc<span class="token punctuation">;</span>Memory<span class="token operator">*</span> mem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//Intel</span><span class="token keyword">class</span> <span class="token class-name">IntelCpu</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">CPU</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Intel的CPU开始计算了？"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IntelVc</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">VideoCard</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Intel的显卡开始显示了？"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IntelMem</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Memory</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Intel的内存条开始存储了？"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//Lenovo</span><span class="token keyword">class</span> <span class="token class-name">LenovoCpu</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">CPU</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Lenovo的CPU开始计算了？"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LenovoVc</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">VideoCard</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Lenovo的显卡开始显示了？"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LenovoMem</span> <span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Memory</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Lenovo的内存条开始存储了？"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//第一台电脑零件</span>CPU<span class="token operator">*</span> cpu <span class="token operator">=</span> <span class="token keyword">new</span> IntelCpu<span class="token punctuation">;</span>VideoCard<span class="token operator">*</span> vc <span class="token operator">=</span> <span class="token keyword">new</span> IntelVc<span class="token punctuation">;</span>Memory<span class="token operator">*</span> mem <span class="token operator">=</span> <span class="token keyword">new</span> IntelMem<span class="token punctuation">;</span><span class="token comment">//创建第一台电脑</span>Computer <span class="token operator">*</span>computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Computer</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> vc<span class="token punctuation">,</span> mem<span class="token punctuation">)</span><span class="token punctuation">;</span>computer<span class="token operator">-&gt;</span><span class="token function">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> computer<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++黑马程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++黑马程序员---二、结构体</title>
      <link href="posts/6839b2d1.html"/>
      <url>posts/6839b2d1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>语法：<br>        struct 结构体名{<br>        结构体成员列表<br>        };</p><h2 id="2-1-创建学生数据类型"><a href="#2-1-创建学生数据类型" class="headerlink" title="2.1  创建学生数据类型"></a>2.1  创建学生数据类型</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>                string name<span class="token punctuation">;</span>    <span class="token comment">//姓名</span>                <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//年龄</span>                <span class="token keyword">int</span> score<span class="token punctuation">;</span>        <span class="token comment">//分数</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-通过学生类型创建具体学生"><a href="#2-2-通过学生类型创建具体学生" class="headerlink" title="2.2  通过学生类型创建具体学生"></a>2.2  通过学生类型创建具体学生</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Student</span> S1<span class="token punctuation">;</span>            <span class="token comment">//Student S1  也可</span>S1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>S1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>S1<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Student</span> S2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//定义结构体时顺便创建结构变量    </span><span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    <span class="token comment">//姓名</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//年龄</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span>        <span class="token comment">//分数</span><span class="token punctuation">}</span>S3<span class="token punctuation">;</span>        <span class="token comment">//顺便创建结构体变量，S3就是结构体变量</span>            S3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>S3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>S3<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-结构体数组"><a href="#2-3-结构体数组" class="headerlink" title="2.3  结构体数组"></a>2.3  结构体数组</h2>语法：  struct 结构体名 数组名{元素个数}={{},{},...{}}<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//1.定义结构体 </span><span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>string name<span class="token punctuation">;</span>    <span class="token comment">//姓名</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//年龄</span><span class="token keyword">int</span> score<span class="token punctuation">;</span>        <span class="token comment">//分数</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//2.创建结构体数组</span><span class="token keyword">struct</span> <span class="token class-name">Student</span> stuArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">166</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//3.给结构体数组中的元素赋值</span>stuArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"赵六"</span><span class="token punctuation">;</span><span class="token comment">//4.遍历结构体数组</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"姓名："</span><span class="token operator">&lt;&lt;</span>stuArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name    <span class="token operator">&lt;&lt;</span><span class="token string">"年龄："</span><span class="token operator">&lt;&lt;</span>stuArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age    <span class="token operator">&lt;&lt;</span><span class="token string">"成绩："</span><span class="token operator">&lt;&lt;</span>stuArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-结构体指针"><a href="#2-4-结构体指针" class="headerlink" title="2.4  结构体指针"></a>2.4  结构体指针</h2><p>利用操作符-&gt;可以通过结构体指针访问结构体属性</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//1.定义结构体</span><span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>string name<span class="token punctuation">;</span>    <span class="token comment">//姓名</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//年龄</span><span class="token keyword">int</span> score<span class="token punctuation">;</span>        <span class="token comment">//分数</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//1.创建学生结构体变量      </span><span class="token keyword">struct</span> <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//struct可省略</span><span class="token comment">//2.通过指针指向结构体变量</span><span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span>        <span class="token comment">//struct可省略</span><span class="token comment">//3.通过指针访问结构体变量中的数据</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"姓名："</span><span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>name <span class="token operator">&lt;&lt;</span><span class="token string">"年龄："</span><span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>age <span class="token operator">&lt;&lt;</span><span class="token string">"成绩："</span><span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>score<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-结构体嵌套结构体"><a href="#2-5-结构体嵌套结构体" class="headerlink" title="2.5  结构体嵌套结构体"></a>2.5  结构体嵌套结构体</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//学生结构体</span><span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//老师结构体</span><span class="token keyword">struct</span> <span class="token class-name">teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">student</span> stu<span class="token punctuation">;</span>  <span class="token comment">//辅导的学生</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    teacher t<span class="token punctuation">;</span>    t<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"老王"</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小王"</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    t<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老师姓名:"</span> <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span>endl <span class="token operator">&lt;&lt;</span> <span class="token string">"学生姓名:"</span> <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>name<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-6-结构体做函数参数"><a href="#2-6-结构体做函数参数" class="headerlink" title="2.6  结构体做函数参数"></a>2.6  结构体做函数参数</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//学生结构体</span><span class="token keyword">struct</span> <span class="token class-name">student</span> <span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printstudent1</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span> s<span class="token punctuation">)</span><span class="token comment">// 值传递</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"子函数1中 姓名："</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printstudent2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token comment">//地址传递</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"子函数2中 姓名："</span> <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    student s<span class="token punctuation">;</span>    s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">85</span><span class="token punctuation">;</span>    <span class="token function">printstudent1</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printstudent2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-7-结构体中const使用"><a href="#2-7-结构体中const使用" class="headerlink" title="2.7  结构体中const使用"></a>2.7  结构体中const使用</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> student <span class="token operator">*</span>p <span class="token punctuation">)</span>    <span class="token comment">//p的值无法被修改，类似实参形参，不过指针只传递地址，参数要传输大量数据，节省了空间.加入const之后一旦有修改操作就会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++黑马程序员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-347. 前 K 个高频元素</title>
      <link href="posts/a6b57153.html"/>
      <url>posts/a6b57153.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本题地址  <a href="https://leetcode.cn/problems/top-k-frequent-elements/">leetcode-347. 前 K 个高频元素</a></p></blockquote><p>题目描述：</p><blockquote><p>给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。</p><ul><li>1 &lt;= nums.length &lt;= 10^5</li><li>k 的取值范围是 [1, 数组中不相同的元素的个数]</li><li>题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的</li><li>你所设计算法的时间复杂度 <strong>必须</strong> 优于 O(n log n) ，其中 n 是数组大小。</li></ul></blockquote><p>示例：</p><blockquote><p><strong>输入:</strong> nums = [1,1,1,2,2,3], k = 2<br><strong>输出:</strong> [1,2]</p><p><strong>输入:</strong> nums = [1], k = 1<br><strong>输出:</strong> [1]</p></blockquote><p>题解：</p><blockquote><p>将数组中所有的元素以及这个元素出现的次数记录在一个map中。<br>自定义优先队列的比较方式，将出现次数最少的放在队头，队列中存储k个元素，超过k个元素时，就将队头出队，最后队列中k个元素就是要找的出现频率前k高的元素。<br><a href="https://cotocode.github.io/posts/cf8ab80f.html" title="基础知识---优先队列">基础知识—优先队列</a>。</p></blockquote><p>for(auto a:b)中b为一个容器，效果是利用a遍历并获得b容器中的每一个值，但是a无法影响到b容器中的元素。<br>for(auto &amp;a:b)中加了引用符号，可以对容器中的内容进行赋值，即可通过对a赋值来做到容器b的内容填充。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">topKFrequent</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//1.map记录元素出现的次数</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> map<span class="token punctuation">;</span><span class="token comment">//两个int分别是元素和出现的次数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> c<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>            map<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment">//2.利用优先队列，将出现次数排序</span>        <span class="token comment">//自定义优先队列的比较方式，小顶堆</span>        <span class="token keyword">struct</span> <span class="token class-name">myComparison</span><span class="token punctuation">{</span>            <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span>p1<span class="token punctuation">,</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span>p2<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> p1<span class="token punctuation">.</span>second<span class="token operator">&gt;</span>p2<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token comment">//小顶堆是大于号</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//创建优先队列</span>        priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>myComparison<span class="token operator">&gt;</span> q<span class="token punctuation">;</span>        <span class="token comment">//遍历map中的元素</span>        <span class="token comment">//1.管他是啥，先入队列，队列会自己排序将他放在合适的位置</span>        <span class="token comment">//2.若队列元素个数超过k，则将栈顶元素出栈（栈顶元素一定是最小的那个）</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> a<span class="token operator">:</span>map<span class="token punctuation">)</span><span class="token punctuation">{</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>               q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//将结果导出</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>res<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优先队列</title>
      <link href="posts/cf8ab80f.html"/>
      <url>posts/cf8ab80f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-定义："><a href="#1-定义：" class="headerlink" title="1.定义："></a>1.定义：</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue<span class="token operator">&lt;</span>Type<span class="token punctuation">,</span> Container<span class="token punctuation">,</span> Functional<span class="token operator">&gt;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Type是要存放的数据类型<br>Container是实现底层堆的容器，必须是数组实现的容器，如vector、deque<br>Functional是比较方式/比较函数/优先级</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时默认的Container是vector，默认的Functional是大顶堆less<type></type></p><h1 id="2-示例："><a href="#2-示例：" class="headerlink" title="2.示例："></a>2.示例：</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//小顶堆</span>priority_queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> q<span class="token punctuation">;</span><span class="token comment">//大顶堆</span>priority_queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> q<span class="token punctuation">;</span><span class="token comment">//默认大顶堆</span>priority_queue <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//pair</span>priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> a<span class="token punctuation">;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>   a<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//输出结果为：</span><span class="token number">2</span> <span class="token number">5</span><span class="token number">1</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-常用函数："><a href="#3-常用函数：" class="headerlink" title="3.常用函数："></a>3.常用函数：</h1><blockquote><p>top()<br>pop()<br>push()<br>emplace()<br>empty()<br>size()</p></blockquote><h1 id="4-自定义比较方式："><a href="#4-自定义比较方式：" class="headerlink" title="4.自定义比较方式："></a>4.自定义比较方式：</h1><p>当数据类型并不是基本数据类型，而是自定义的数据类型时，就不能用greater或less的比较方式了，而是需要自定义比较方式<br>在此假设数据类型是自定义的水果：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">fruit</span><span class="token punctuation">{</span>string name<span class="token punctuation">;</span><span class="token keyword">int</span> price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有两种自定义比较方式的方法：</p><h2 id="1-重载运算符"><a href="#1-重载运算符" class="headerlink" title="1.重载运算符"></a>1.重载运算符</h2><p>重载”&lt;”</p><ul><li><p>若希望水果价格高为优先级高</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//大顶堆</span><span class="token keyword">struct</span> <span class="token class-name">fruit</span><span class="token punctuation">{</span>string name<span class="token punctuation">;</span><span class="token keyword">int</span> price<span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>fruit f1<span class="token punctuation">,</span>fruit f2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> f1<span class="token punctuation">.</span>peice <span class="token operator">&lt;</span> f2<span class="token punctuation">.</span>price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若希望水果价格低为优先级高</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//小顶堆</span><span class="token keyword">struct</span> <span class="token class-name">fruit</span><span class="token punctuation">{</span>string name<span class="token punctuation">;</span><span class="token keyword">int</span> price<span class="token punctuation">;</span><span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>fruit f1<span class="token punctuation">,</span>fruit f2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> f1<span class="token punctuation">.</span>peice <span class="token operator">&gt;</span> f2<span class="token punctuation">.</span>price<span class="token punctuation">;</span>  <span class="token comment">//此处是&gt;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-仿函数"><a href="#2-仿函数" class="headerlink" title="2.仿函数"></a>2.仿函数</h2><p>若希望水果价格高为优先级高</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//大顶堆</span><span class="token keyword">struct</span> <span class="token class-name">myComparison</span><span class="token punctuation">{</span><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>fruit f1<span class="token punctuation">,</span>fruit f2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> f1<span class="token punctuation">.</span>price <span class="token operator">&lt;</span> f2<span class="token punctuation">.</span>price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//此时优先队列的定义应该如下</span>priority_queue<span class="token operator">&lt;</span>fruit<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>fruit<span class="token operator">&gt;</span><span class="token punctuation">,</span>myComparison<span class="token operator">&gt;</span> q<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-215. 数组中的第K个最大元素</title>
      <link href="posts/9a31e8f5.html"/>
      <url>posts/9a31e8f5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本题地址：<a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">leetcode-215. 数组中的第K个最大元素</a></p></blockquote><p>题目描述：</p><blockquote><p>给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。<br>请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。<br>1 &lt;= k &lt;= nums.length &lt;= 10^5<br>-10^4 &lt;= nums[i] &lt;= 10^4</p></blockquote><p>示例：</p><blockquote><p><strong>输入:</strong> [3,2,1,5,6,4], k = 2<br><strong>输出:</strong> 5<br><strong>输入:</strong> [3,2,3,1,2,4,5,5,6], k = 4<br><strong>输出:</strong> 4</p></blockquote><p>题解：</p><blockquote><p>可以构造大根堆，第k个输出的值则为第k大的元素。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">maxHeapify</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> heapSize<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> largest <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> heapSize <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span>            largest <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> heapSize <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span>            largest <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">!=</span> i<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">maxHeapify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> heapSize<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> heapSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>             <span class="token function">maxHeapify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">int</span> heapSize <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">--</span>heapSize<span class="token punctuation">;</span>            <span class="token function">maxHeapify</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown基本语法</title>
      <link href="posts/4a098467.html"/>
      <url>posts/4a098467.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>要创建标题，请在单词或短语前面添加井号 (#) 。# 的数量代表了标题的级别。<br>注：在#后跟个空格再写文字。</p><h1 id="二、段落"><a href="#二、段落" class="headerlink" title="二、段落"></a>二、段落</h1><p>要创建段落，使用空白行将一行或多行文本进行分隔。</p><h1 id="三、强调"><a href="#三、强调" class="headerlink" title="三、强调"></a>三、强调</h1><h2 id="1-粗体"><a href="#1-粗体" class="headerlink" title="1.粗体"></a>1.粗体</h2><p>要加粗的文字左右分别用两个*号包起来</p><h2 id="2-斜体"><a href="#2-斜体" class="headerlink" title="2.斜体"></a>2.斜体</h2><p>要倾斜的文字左右分别用一个*号包起来</p><h2 id="3-粗体和斜体"><a href="#3-粗体和斜体" class="headerlink" title="3.粗体和斜体"></a>3.粗体和斜体</h2><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><h2 id="4-删除线"><a href="#4-删除线" class="headerlink" title="4.删除线"></a>4.删除线</h2><p>要加删除线的文字左右分别用两个~~号包起来</p><pre class="line-numbers language-none"><code class="language-none">**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、引用"><a href="#四、引用" class="headerlink" title="四、引用"></a>四、引用</h1><p>要创建块引用，在段落前添加一个 &gt; 符号。<br>块引用可以包含多个段落。为段落之间的空白行添加一个 &gt; 符号。<br>块引用可以嵌套。在要嵌套的段落前添加一个 &gt;&gt; 符号。</p><h1 id="五、列表"><a href="#五、列表" class="headerlink" title="五、列表"></a>五、列表</h1><h2 id="1-有序列表"><a href="#1-有序列表" class="headerlink" title="1.有序列表"></a>1.有序列表</h2><p>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</p><h2 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="2.无序列表"></a>2.无序列表</h2><p>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。</p><p>在列表中嵌套其他元素：</p><ul><li>段落</li><li>引用块</li><li>代码块</li><li>图片</li><li>列表</li></ul><h1 id="六、代码"><a href="#六、代码" class="headerlink" title="六、代码"></a>六、代码</h1><p>单行代码：代码之间分别用一个反引号包起来</p><pre class="line-numbers language-none"><code class="language-none">`代码内容`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><pre class="line-numbers language-none"><code class="language-none">(```)  代码...  代码...  代码...(```)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七、分隔线"><a href="#七、分隔线" class="headerlink" title="七、分隔线"></a>七、分隔线</h1><p>要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。<br>为了兼容性，请在分隔线的前后均添加空白行。</p><pre class="line-numbers language-none"><code class="language-none">Try to put a blank line before---and after a horizontal rule.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Try to put a blank line before</p><hr><p>and after a horizontal rule.</p><h1 id="八、链接"><a href="#八、链接" class="headerlink" title="八、链接"></a>八、链接</h1><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。  </p><p>链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔。</p><pre class="line-numbers language-none"><code class="language-none">超链接Markdown语法代码：[超链接显示名](超链接地址 "超链接title")这是一个链接 [Markdown语法](https://markdown.com.cn "超链接title")。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是一个链接 <a href="https://markdown.com.cn/" title="超链接title">Markdown语法</a>。</p><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。</p><pre class="line-numbers language-none"><code class="language-none">&lt;https://markdown.com.cn&gt;&lt;fake@example.com&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://markdown.com.cn/">https://markdown.com.cn</a><br><a href="mailto:fake@example.com">fake@example.com</a></p><h1 id="九、图片"><a href="#九、图片" class="headerlink" title="九、图片"></a>九、图片</h1><p>要添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。</p><p>插入图片Markdown语法代码：</p><pre class="line-numbers language-none"><code class="language-none">![图片alt](图片链接 "图片title")![这是图片](/assets/img/philly-magic-garden.jpg "Magic Gardens")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/assets/img/philly-magic-garden.jpg" alt="这是图片" title="Magic Gardens"></p><h1 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h1><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>姓名</th><th>技能</th><th>排行</th></tr></thead><tbody><tr><td>刘备</td><td>哭</td><td>大哥</td></tr><tr><td>关羽</td><td>打</td><td>二哥</td></tr><tr><td>张飞</td><td>骂</td><td>三弟</td></tr></tbody></table><h1 id="十一、流程图"><a href="#十一、流程图" class="headerlink" title="十一、流程图"></a>十一、流程图</h1><pre class="line-numbers language-none"><code class="language-none">```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=&gt;</span>start<span class="token operator">:</span> 开始op<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> My Operationcond<span class="token operator">=&gt;</span>condition<span class="token operator">:</span> Yes or No<span class="token operator">?</span>e<span class="token operator">=&gt;</span>endst<span class="token operator">-</span><span class="token operator">&gt;</span>op<span class="token operator">-</span><span class="token operator">&gt;</span>cond<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>e<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>op<span class="token operator">&amp;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`# 十二、转义字符要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。可做转义的字符：以下列出的字符都可以通过使用反斜杠字符从而达到转义目的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>\    `    *    _    { }    [ ]    ( )    #    +    -    .    !    |</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
